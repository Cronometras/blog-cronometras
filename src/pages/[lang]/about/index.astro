---
import { getCollection } from 'astro:content';
import Base from '@/layouts/Base.astro';

export const getStaticPaths = async () => {
  return [
    { params: { lang: 'es' } },
    { params: { lang: 'en' } },
  ];
};

// Habilitar prerender para generar páginas estáticas durante la compilación
export const prerender = true;

const { lang } = Astro.params;
console.log(`Renderizando página about para idioma: ${lang}`);

// Obtener el contenido de about para el idioma actual
const aboutContent = await getCollection('about');
console.log("Todos los documentos about:", aboutContent.map(entry => entry.id));

// Buscar el documento por ID en lugar de por slug
const aboutEntry = aboutContent.find(entry => entry.id === `${lang}/index.md`);

if (!aboutEntry) {
  console.error(`No se encontró contenido de about para el idioma: ${lang}, ID buscado: ${lang}/index.md`);
  console.error("IDs disponibles:", aboutContent.map(entry => entry.id));
}

// Título y descripción por defecto en caso de que no se encuentre el contenido
const title = aboutEntry?.data?.title || (lang === 'es' ? 'Sobre Nosotros' : 'About Us');
const description = aboutEntry?.data?.description || '';
const pageTitle = aboutEntry?.data?.document_title || title;
const buttons = aboutEntry?.data?.buttons || [];

// Obtener el contenido
let Content;
if (aboutEntry) {
  try {
    const rendered = await aboutEntry.render();
    Content = rendered.Content;
  } catch (error) {
    console.error(`Error al renderizar el contenido de about para ${lang}:`, error);
    Content = null;
  }
}
---

<Base title={pageTitle} description={description}>
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <div class="md:col-10 lg:col-8 text-center">
          <h1 class="h2 mb-6">{title}</h1>
          {description && <p class="mb-8">{description}</p>}
          {buttons.length > 0 && (
            <div class="flex flex-col sm:flex-row justify-center items-center gap-4 mt-6 sm:flex-nowrap">
              {buttons.map((button) => (
                <a
                  href={button.href}
                  target={button.target || "_self"}
                  class={button.class || `btn ${button.color === "primary" ? "btn-primary" : "btn-outline-primary"}`}
                >
                  {button.icon && (
                    <span class="mr-3 inline-flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-${button.icon}">
                        {button.icon === 'mail' && (
                          <>
                            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                            <polyline points="22,6 12,13 2,6"></polyline>
                          </>
                        )}
                        {button.icon === 'external-link' && (
                          <>
                            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                            <polyline points="15 3 21 3 21 9"></polyline>
                            <line x1="10" y1="14" x2="21" y2="3"></line>
                          </>
                        )}
                      </svg>
                    </span>
                  )}
                  {button.label}
                </a>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  </section>

  <section class="section pt-0">
    <div class="container">
      {Content ? (
        <div class="content">
          <Content />
        </div>
      ) : (
        <div class="row justify-center">
            <p class="text-xl text-red-500">
              {lang === 'es'
                ? 'Lo sentimos, no se pudo cargar el contenido.'
                : 'Sorry, the content could not be loaded.'}
            </p>
        </div>
      )}
    </div>
  </section>
</Base>