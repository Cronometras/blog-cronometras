---
import Logo from "../../components/core/Logo.astro";
import ThemeToggle from "../../components/core/ThemeToggle.astro";
import LanguagePicker from "../../components/LanguagePicker.astro";
import SimpleSearch from "../../components/search/SimpleSearch.astro";
import config from "../../config/config.json";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { pathname } = Astro.url;

// Function to check if a URL is active
const isActiveUrl = (menuUrl: string) => {
  // Caso especial para la página de inicio
  if (menuUrl === '/') {
    const langPrefix = `/${lang}`;
    return pathname === langPrefix || pathname === `${langPrefix}/`;
  }

  const translatedUrl = translatePath(menuUrl);
  return pathname === translatedUrl || pathname.startsWith(translatedUrl + '/');
};
---

<header class="header z-30 sticky top-0 bg-white dark:bg-gray-900 bg-opacity-95 dark:bg-opacity-95 backdrop-blur-sm">
  <nav class="navbar container">
    <div class="flex items-center justify-between h-16 w-full">
      <div class="flex items-center">
        <Logo />
      </div>

      <!-- Menú de navegación para pantallas medianas y grandes -->
      <div class="hidden md:flex md:items-center md:space-x-4">
        <a href={translatePath('/')} class={`nav-link ${isActiveUrl('/') ? 'active' : ''}`}>
          {t('nav.home')}
        </a>
        <a href={translatePath('/blog')} class={`nav-link ${isActiveUrl('/blog') ? 'active' : ''}`}>
          {t('nav.blog')}
        </a>
        <a href={translatePath('/features')} class={`nav-link ${isActiveUrl('/features') ? 'active' : ''}`}>
          {t('nav.features')}
        </a>
        <a href={translatePath('/about')} class={`nav-link ${isActiveUrl('/about') ? 'active' : ''}`}>
          {t('nav.about')}
        </a>
        <div class="relative group">
          <a href="javascript:void(0)" class={`nav-link flex items-center ${isActiveUrl('/dashboard') || isActiveUrl('/info') || isActiveUrl('/method') || isActiveUrl('/repetitive') || isActiveUrl('/continuous') || isActiveUrl('/frequency') || isActiveUrl('/machine') || isActiveUrl('/supplements') || isActiveUrl('/report') || isActiveUrl('/library') ? 'active' : ''}`}>
            {t('nav.pages')}
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </a>
          <div class="absolute left-0 mt-0 pt-2 w-48 bg-transparent z-10 hidden group-hover:block">
            <div class="bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 w-full">
            <a href={translatePath('/dashboard')} class={`dropdown-item ${isActiveUrl('/dashboard') ? 'active' : ''}`}>
              {t('nav.dashboard')}
            </a>
            <a href={translatePath('/info')} class={`dropdown-item ${isActiveUrl('/info') ? 'active' : ''}`}>
              {t('nav.info')}
            </a>
            <a href={translatePath('/method')} class={`dropdown-item ${isActiveUrl('/method') ? 'active' : ''}`}>
              {t('nav.method')}
            </a>
            <a href={translatePath('/repetitive')} class={`dropdown-item ${isActiveUrl('/repetitive') ? 'active' : ''}`}>
              {t('nav.repetitive')}
            </a>
            <a href={translatePath('/continuous')} class={`dropdown-item ${isActiveUrl('/continuous') ? 'active' : ''}`}>
              {t('nav.continuous')}
            </a>
            <a href={translatePath('/frequency')} class={`dropdown-item ${isActiveUrl('/frequency') ? 'active' : ''}`}>
              {t('nav.frequency')}
            </a>
            <a href={translatePath('/machine')} class={`dropdown-item ${isActiveUrl('/machine') ? 'active' : ''}`}>
              {t('nav.machine')}
            </a>
            <a href={translatePath('/supplements')} class={`dropdown-item ${isActiveUrl('/supplements') ? 'active' : ''}`}>
              {t('nav.supplements')}
            </a>
            <a href={translatePath('/report')} class={`dropdown-item ${isActiveUrl('/report') ? 'active' : ''}`}>
              {t('nav.report')}
            </a>
            <a href={translatePath('/library')} class={`dropdown-item ${isActiveUrl('/library') ? 'active' : ''}`}>
              {t('nav.library')}
            </a>
            </div>
          </div>
        </div>
        <a href={translatePath('/contact')} class={`nav-link ${isActiveUrl('/contact') ? 'active' : ''}`}>
          {t('nav.contact')}
        </a>
      </div>

      <div class="flex items-center justify-end space-x-6 md:space-x-4">
        <SimpleSearch />
        <LanguagePicker />
        <ThemeToggle />
        <!-- Botón de menú móvil -->
        <button
          id="show-button"
          class="md:hidden p-1"
          aria-label="Mostrar menú"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Menú móvil -->
    <div id="mobile-menu" class="hidden md:hidden">
      <div class="px-2 pt-2 pb-3 space-y-1">
        <a href={translatePath('/')} class={`mobile-nav-link ${isActiveUrl('/') ? 'active' : ''}`}>
          {t('nav.home')}
        </a>
        <a href={translatePath('/blog')} class={`mobile-nav-link ${isActiveUrl('/blog') ? 'active' : ''}`}>
          {t('nav.blog')}
        </a>
        <a href={translatePath('/features')} class={`mobile-nav-link ${isActiveUrl('/features') ? 'active' : ''}`}>
          {t('nav.features')}
        </a>
        <a href={translatePath('/about')} class={`mobile-nav-link ${isActiveUrl('/about') ? 'active' : ''}`}>
          {t('nav.about')}
        </a>

        <!-- Submenú de páginas en móvil -->
        <div class="py-2">
          <button id="pages-dropdown-button" class={`mobile-nav-link w-full text-left flex items-center justify-between ${isActiveUrl('/dashboard') || isActiveUrl('/info') || isActiveUrl('/method') || isActiveUrl('/repetitive') || isActiveUrl('/continuous') || isActiveUrl('/frequency') || isActiveUrl('/machine') || isActiveUrl('/supplements') || isActiveUrl('/report') || isActiveUrl('/library') ? 'active' : ''}`}>
            <span>{t('nav.pages')}</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 transform transition-transform" id="pages-dropdown-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div id="pages-dropdown-menu" class="hidden mt-2 pl-4 border-l-2 border-gray-200 dark:border-gray-700">
            <a href={translatePath('/dashboard')} class={`mobile-nav-link ${isActiveUrl('/dashboard') ? 'active' : ''}`}>
              {t('nav.dashboard')}
            </a>
            <a href={translatePath('/info')} class={`mobile-nav-link ${isActiveUrl('/info') ? 'active' : ''}`}>
              {t('nav.info')}
            </a>
            <a href={translatePath('/method')} class={`mobile-nav-link ${isActiveUrl('/method') ? 'active' : ''}`}>
              {t('nav.method')}
            </a>
            <a href={translatePath('/repetitive')} class={`mobile-nav-link ${isActiveUrl('/repetitive') ? 'active' : ''}`}>
              {t('nav.repetitive')}
            </a>
            <a href={translatePath('/continuous')} class={`mobile-nav-link ${isActiveUrl('/continuous') ? 'active' : ''}`}>
              {t('nav.continuous')}
            </a>
            <a href={translatePath('/frequency')} class={`mobile-nav-link ${isActiveUrl('/frequency') ? 'active' : ''}`}>
              {t('nav.frequency')}
            </a>
            <a href={translatePath('/machine')} class={`mobile-nav-link ${isActiveUrl('/machine') ? 'active' : ''}`}>
              {t('nav.machine')}
            </a>
            <a href={translatePath('/supplements')} class={`mobile-nav-link ${isActiveUrl('/supplements') ? 'active' : ''}`}>
              {t('nav.supplements')}
            </a>
            <a href={translatePath('/report')} class={`mobile-nav-link ${isActiveUrl('/report') ? 'active' : ''}`}>
              {t('nav.report')}
            </a>
            <a href={translatePath('/library')} class={`mobile-nav-link ${isActiveUrl('/library') ? 'active' : ''}`}>
              {t('nav.library')}
            </a>
          </div>
        </div>

        <a href={translatePath('/contact')} class={`mobile-nav-link ${isActiveUrl('/contact') ? 'active' : ''}`}>
          {t('nav.contact')}
        </a>
      </div>
    </div>
  </nav>
</header>

<style>
.header {
  @apply py-2 md:py-4 border-b border-gray-200 dark:border-gray-800 transition-colors duration-300;
}
.navbar {
  @apply relative flex flex-col w-full;
}
.nav-link {
  @apply px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-accent dark:hover:text-secondary transition-colors duration-200;
}
.mobile-nav-link {
  @apply block px-3 py-2 text-base font-medium text-gray-700 dark:text-gray-300 hover:text-accent dark:hover:text-secondary transition-colors duration-200;
}
.active {
  @apply text-accent dark:text-secondary;
}

/* Estilos para el menú desplegable */
.group {
  @apply relative;
}
.group:hover > div {
  @apply block;
}

/* Estilos para los elementos del menú desplegable */
.dropdown-item {
  @apply block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700;
}
.dropdown-item.active {
  @apply text-accent dark:text-secondary;
}

/* Estilos para forzar el modo oscuro en la cabecera */
.dark-mode-applied {
  @apply bg-gray-900 bg-opacity-95 text-gray-300;
}
</style>

<script>
document.addEventListener('astro:page-load', () => {
  const showButton = document.getElementById("show-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const pagesDropdownButton = document.getElementById("pages-dropdown-button");
  const pagesDropdownMenu = document.getElementById("pages-dropdown-menu");
  const pagesDropdownIcon = document.getElementById("pages-dropdown-icon");

  // Función para actualizar el estilo de la cabecera según el modo
  const updateHeaderStyle = () => {
    const header = document.querySelector('.header');
    if (header) {
      // Verificar si estamos en modo oscuro
      const isDarkMode = document.documentElement.classList.contains('dark');
      if (isDarkMode) {
        // Asegurar que los estilos del modo oscuro se apliquen correctamente
        header.classList.add('dark-mode-applied');
      } else {
        // Quitar los estilos del modo oscuro si estamos en modo claro
        header.classList.remove('dark-mode-applied');
      }
      // Forzar un reflow para aplicar los estilos correctos
      header.offsetHeight;
    }
  };

  // Actualizar el estilo al cargar la página
  updateHeaderStyle();

  // Observar cambios en la clase 'dark' del documento
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class' &&
          (mutation.target as Element).classList.contains('dark') !== undefined) {
        updateHeaderStyle();
      }
    });
  });

  // Iniciar la observación del elemento html
  observer.observe(document.documentElement, { attributes: true });

  // Escuchar el evento personalizado de cambio de tema
  document.addEventListener('themeChanged', () => {
    updateHeaderStyle();
  });

  if (showButton && mobileMenu) {
    showButton.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden");
    });

    // Cerrar el menú móvil cuando se hace clic fuera de él
    document.addEventListener("click", (event) => {
      const target = event.target as Node;
      if (!showButton.contains(target) && !mobileMenu.contains(target)) {
        mobileMenu.classList.add("hidden");
      }
    });

    // Cerrar el menú móvil cuando se hace clic en un enlace (excepto en el botón del submenú)
    const mobileLinks = mobileMenu.querySelectorAll('a');
    mobileLinks.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
      });
    });
  }

  // Manejo del submenú de páginas en móvil
  if (pagesDropdownButton && pagesDropdownMenu && pagesDropdownIcon) {
    pagesDropdownButton.addEventListener("click", (e) => {
      e.stopPropagation(); // Evitar que el clic se propague al documento
      pagesDropdownMenu.classList.toggle("hidden");
      pagesDropdownIcon.classList.toggle("rotate-180");
    });

    // Evitar que el clic en el submenú cierre el menú principal
    pagesDropdownMenu.addEventListener("click", (e) => {
      e.stopPropagation();
    });
  }
});
</script>
