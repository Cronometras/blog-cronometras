---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div id="search-modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
  <div class="flex min-h-screen items-center justify-center p-4 text-center">
    <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity" id="search-backdrop" onclick="toggleSearchModal()"></div>

    <div class="relative w-full max-w-2xl transform overflow-hidden rounded-lg bg-white dark:bg-gray-800 p-6 text-left shadow-xl transition-all">
      <div class="mb-4 flex items-center justify-between">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">
          {lang === 'es' ? 'Buscar en el blog' : 'Search the blog'}
        </h3>
        <button id="close-search-modal" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300" onclick="toggleSearchModal()">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <div id="autocomplete" class="w-full"></div>
    </div>
  </div>
</div>

<script is:inline>
  // Función global para abrir/cerrar el modal de búsqueda
  function toggleSearchModal() {
    console.log('toggleSearchModal called');
    const searchModal = document.getElementById('search-modal');
    const searchBackdrop = document.getElementById('search-backdrop');

    if (searchModal && searchBackdrop) {
      console.log('Toggling search modal');
      searchModal.classList.toggle('hidden');

      if (!searchModal.classList.contains('hidden')) {
        document.body.classList.add('overflow-hidden');

        // Inicializar autocomplete cuando se abre el modal
        initAlgoliaAutocomplete();

        // Enfocar el campo de búsqueda
        setTimeout(() => {
          const input = document.querySelector('.aa-Input');
          if (input) {
            input.focus();
          }
        }, 100);
      } else {
        document.body.classList.remove('overflow-hidden');
      }
    } else {
      console.error('Search modal or backdrop not found');
    }
  }
</script>

<script>
  import algoliasearch from 'algoliasearch/lite';
  import { autocomplete, getAlgoliaResults } from '@algolia/autocomplete-js';
  import '@algolia/autocomplete-theme-classic';

  // Exponer variables y funciones globalmente
  window.autocomplete = autocomplete;
  window.getAlgoliaResults = getAlgoliaResults;
  window.algoliasearch = algoliasearch;
  window.autocompleteInstance = null;

  // Función global para inicializar Algolia Autocomplete
  window.initAlgoliaAutocomplete = function() {
    console.log('initAlgoliaAutocomplete called');

    try {
      // Verificar que el contenedor existe
      const container = document.getElementById('autocomplete');
      if (!container) {
        console.error('Autocomplete container not found');
        return;
      }

      // Verificar que las funciones necesarias están disponibles
      if (typeof window.algoliasearch !== 'function' || typeof window.autocomplete !== 'function') {
        console.error('Algolia functions not available', {
          algoliasearch: typeof window.algoliasearch,
          autocomplete: typeof window.autocomplete
        });
        return;
      }

      // Configuración de Algolia
      const appId = 'ECFPLTCVYS';
      const apiKey = '463072454d6fd853983fceec6f91f12a';
      const indexName = 'cronometras_blog';

      console.log('Algolia config:', { appId, apiKey: apiKey.substring(0, 5) + '...', indexName });

      const searchClient = window.algoliasearch(appId, apiKey);

      // Obtener el idioma actual de la URL
      const pathSegments = window.location.pathname.split('/').filter(Boolean);
      const currentLang = pathSegments[0] === 'es' || pathSegments[0] === 'en' ? pathSegments[0] : 'es';

      // Destruir instancia anterior si existe
      if (window.autocompleteInstance) {
        try {
          window.autocompleteInstance.destroy();
        } catch (e) {
          console.error('Error destroying previous instance', e);
        }
      }

      try {
        console.log('Creating autocomplete instance');
        window.autocompleteInstance = window.autocomplete({
          container: '#autocomplete',
          placeholder: currentLang === 'es' ? 'Buscar artículos...' : 'Search articles...',
          openOnFocus: true,
          detachedMediaQuery: '',
          getSources({ query }) {
            return [
              {
                sourceId: 'blog-posts',
                getItems() {
                  try {
                    return window.getAlgoliaResults({
                      searchClient,
                      queries: [
                        {
                          indexName,
                          query,
                          params: {
                            hitsPerPage: 10,
                            filters: `lang:${currentLang}`,
                            attributesToHighlight: ['title', 'description', 'content'],
                            attributesToSnippet: ['content:30'],
                            snippetEllipsisText: '...',
                            highlightPreTag: '<mark>',
                            highlightPostTag: '</mark>'
                          },
                        },
                      ],
                    });
                  } catch (e) {
                    console.error('Error getting Algolia results', e);
                    return [];
                  }
                },
              getItemUrl({ item }) {
                return `/${currentLang}/blog/${item.slug}`;
              },
              templates: {
                item({ item, components, html }) {
                  return html`
                    <a href="/${currentLang}/blog/${item.slug}" class="aa-ItemLink">
                      <div class="aa-ItemContent">
                        <div class="aa-ItemIcon aa-ItemIcon--alignTop">
                          <img
                            src="${item.heroImage || '/images/webp/default.webp'}"
                            alt="${item.title}"
                            width="40"
                            height="40"
                          />
                        </div>
                        <div class="aa-ItemContentBody">
                          <div class="aa-ItemContentTitle">
                            ${components.Highlight({
                              hit: item,
                              attribute: 'title',
                            })}
                          </div>
                          <div class="aa-ItemContentDescription">
                            ${components.Highlight({
                              hit: item,
                              attribute: 'description',
                            })}
                          </div>
                          <div class="aa-ItemContentCategory">
                            <span class="aa-ItemContentCategoryLabel">${item.category}</span>
                            ${item.tags && item.tags.length > 0 ? `
                              <span class="aa-ItemContentTags">
                                ${item.tags.slice(0, 3).map(tag => `<span class="aa-ItemContentTag">${tag}</span>`).join('')}
                              </span>
                            ` : ''}
                          </div>
                          <div class="aa-ItemContentDate">
                            ${item.pubDate ? new Date(item.pubDate).toLocaleDateString(currentLang === 'es' ? 'es-ES' : 'en-US', {
                              year: 'numeric',
                              month: 'short',
                              day: 'numeric'
                            }) : ''}
                          </div>
                        </div>
                      </div>
                    </a>
                  `;
                },
                noResults() {
                  return currentLang === 'es'
                    ? 'No se encontraron resultados para esta búsqueda.'
                    : 'No results found for this search.';
                },
              },
            },
          ];
        },
      });
      console.log('Autocomplete instance created successfully');
    } catch (e) {
      console.error('Error creating autocomplete instance', e);
    }
  }

    // Inicializar Algolia cuando se carga la página
    document.addEventListener('astro:page-load', () => {
      console.log('SearchModal: astro:page-load event fired');

      // Cerrar con Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const searchModal = document.getElementById('search-modal');
          if (searchModal && !searchModal.classList.contains('hidden')) {
            toggleSearchModal();
          }
        }
      });
    });
  };
</script>

<style is:global>
  /* Estilos adicionales para el modal y autocomplete */
  .aa-Panel {
    @apply shadow-lg border border-gray-200 dark:border-gray-700;
  }

  .aa-Form {
    @apply shadow-sm border border-gray-300 dark:border-gray-600 rounded-lg;
  }

  .aa-Input {
    @apply bg-white dark:bg-gray-700 text-gray-900 dark:text-white;
  }

  .aa-Item {
    @apply hover:bg-gray-100 dark:hover:bg-gray-700;
  }

  .aa-ItemContentTitle {
    @apply text-gray-900 dark:text-white font-medium;
  }

  .aa-ItemContentDescription {
    @apply text-gray-600 dark:text-gray-300 text-sm;
  }

  .aa-ItemContentCategory {
    @apply text-xs mt-1 flex flex-wrap gap-1 items-center;
  }

  .aa-ItemContentCategoryLabel {
    @apply text-accent dark:text-secondary font-medium;
  }

  .aa-ItemContentTags {
    @apply flex flex-wrap gap-1;
  }

  .aa-ItemContentTag {
    @apply bg-gray-100 dark:bg-gray-700 px-1.5 py-0.5 rounded-sm text-gray-600 dark:text-gray-300 text-xs;
  }

  .aa-ItemContentDate {
    @apply text-xs text-gray-500 dark:text-gray-400 mt-1;
  }

  /* Destacado de coincidencias */
  .aa-Highlight mark {
    @apply bg-yellow-200 dark:bg-yellow-700 text-gray-900 dark:text-white;
  }

  /* Estilos para el panel de resultados */
  .aa-Panel {
    @apply max-h-[80vh] overflow-y-auto;
  }
</style>
