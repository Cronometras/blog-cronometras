---
// HeroImage.astro - Un componente para mostrar la imagen heroImage con soporte para WebP
import { Image } from 'astro:assets';

const { src, alt = "Hero image", class: className = "rounded-lg w-full" } = Astro.props;

// Verificar si la imagen ya es WebP
const isWebp = src.endsWith('.webp');

// Si no es WebP, crear la ruta para la versi칩n WebP
let webpSrc = src;
if (!isWebp && src.startsWith('/images/')) {
  // Verificar si la imagen est치 en la carpeta webp
  if (!src.includes('/webp/')) {
    const fileName = src.split('/').pop();
    const fileNameWithoutExt = fileName.split('.').slice(0, -1).join('.');
    webpSrc = `/images/webp/${fileNameWithoutExt}.webp`;
  }
}

// Funci칩n para obtener la URL completa
function getFullUrl(path) {
  // Si la ruta ya es una URL completa, devolverla tal cual
  if (path.startsWith('http://') || path.startsWith('https://')) {
    return path;
  }

  // Si tenemos la variable de entorno SITE, usarla para construir la URL completa
  if (import.meta.env.SITE) {
    return new URL(path, import.meta.env.SITE).href;
  }

  // Si no tenemos la variable de entorno SITE, usar la URL base de producci칩n
  return new URL(path, 'https://cronometras.com').href;
}
---

<div class="hero-image-container">
  <picture class="w-full h-full block">
    <source srcset={getFullUrl(webpSrc)} type="image/webp" />
    <img
      src={getFullUrl(src)}
      alt={alt}
      class={className}
      loading="lazy"
      width="1200"
      height="630"
    />
  </picture>
</div>

<style>
  .hero-image-container {
    overflow: hidden;
    width: 100%;
    height: 100%;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.3s ease;
    display: block;
    margin: 0;
  }

  .hero-image-container:hover img {
    transform: scale(1.02);
  }

  @media (max-width: 768px) {
    .hero-image-container {
      height: 100%;
    }
  }
</style>
