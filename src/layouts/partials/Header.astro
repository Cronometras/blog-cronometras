---
import Logo from "@/components/core/Logo.astro";
import ThemeToggle from "@/components/core/ThemeToggle.astro";
import LanguagePicker from "@/components/core/LanguagePicker.astro";
import menu from "@/config/menu.json";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const { main } = menu;
const { pathname } = Astro.url;

// Function to check if a URL is active, considering language prefix
const isActiveUrl = (menuUrl: string) => {
  const translatedUrl = translatePath(menuUrl);
  return pathname === translatedUrl || pathname.startsWith(translatedUrl + '/');
};
---

<header class="header bg-white dark:bg-gray-900 shadow-sm">
  <nav class="navbar container flex flex-col space-y-4 sm:space-y-0 md:space-y-2 lg:space-y-0 sm:flex-row sm:items-center sm:justify-between" data-astro-cid-rq644orq="" data-astro-source-file="C:/Users/micao/OneDrive/APPS/bolt/CRONOMETRAS/V42/blog/alfadev-astro-starter/src/layouts/partials/Header.astro" data-astro-source-loc="23:33">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 ml-auto mr-4 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 ml-auto mr-4 hidden cursor-pointer items-center lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="18.198,16.198 12,10 18.198,3.802 16.198,1.802 10,8 3.802,1.802 1.802,3.802 8,10 1.802,16.198 3.802,18.198 10,12 16.198,18.198"
        ></polygon>
      </svg>
    </label>

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        main.map((menu) => (
          <li class="nav-item">
            {menu.hasChildren ? (
              <div class="relative">
                <button 
                  class="inline-flex items-center nav-link dropdown-button"
                >
                  {t(menu.name)}
                  <svg class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                    <path
                      fillRule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clipRule="evenodd"
                    />
                  </svg>
                </button>
                <ul class="nav-dropdown hidden">
                  {menu.children?.map((child) => (
                    <li>
                      <a
                        href={translatePath(child.url)}
                        class="text-gray-700 dark:text-gray-300 hover:text-primary dark:hover:text-primary block px-4 py-2 text-sm"
                      >
                        {t(child.name)}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            ) : (
              <a
                href={translatePath(menu.url)}
                class={`nav-link block font-medium text-gray-900 dark:text-white hover:text-primary dark:hover:text-primary ${
                  isActiveUrl(menu.url) ? "active" : ""
                }`}
              >
                {t(menu.name)}
              </a>
            )}
          </li>
        ))
      }
    </ul>
    <div class="order-1 ml-auto flex items-center md:order-2 lg:ml-0">
      <ThemeToggle />
      <LanguagePicker />
    </div>
  </nav>
</header>

<style>
.header {
  @apply sticky top-0 z-50 border-b border-gray-200 dark:border-gray-800;
}
.navbar {
  @apply relative flex flex-wrap items-center justify-between px-6 py-4;
}
.navbar-nav {
  @apply mt-4 lg:mt-0;
}
.nav-item {
  @apply lg:flex;
}
.nav-link {
  @apply px-3 py-2 transition-colors duration-200;
}
.nav-dropdown {
  @apply absolute left-0 z-10 mt-2 min-w-[180px] rounded border bg-white py-2 shadow-lg dark:border-gray-800 dark:bg-gray-900;
}
.active {
  @apply text-primary dark:text-primary;
}
</style>

<script>
// Mobile menu toggle
const navToggle = document.getElementById("nav-toggle");
const navMenu = document.getElementById("nav-menu");
const showButton = document.getElementById("show-button");
const hideButton = document.getElementById("hide-button");

navToggle?.addEventListener("change", function () {
  if (this.checked) {
    navMenu?.classList.remove("hidden");
    showButton?.classList.add("hidden");
    hideButton?.classList.remove("hidden");
  } else {
    navMenu?.classList.add("hidden");
    showButton?.classList.remove("hidden");
    hideButton?.classList.add("hidden");
  }
});

// Dropdown menu
document.addEventListener('astro:page-load', () => {
  const buttons = document.querySelectorAll('.dropdown-button');
  let activeDropdown = null;

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.dropdown-button') && activeDropdown) {
      activeDropdown.nextElementSibling.classList.add('hidden');
      activeDropdown = null;
    }
  });

  // Toggle dropdown on button click
  buttons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      const dropdown = button.nextElementSibling;

      if (activeDropdown && activeDropdown !== button) {
        activeDropdown.nextElementSibling.classList.add('hidden');
      }

      dropdown.classList.toggle('hidden');
      activeDropdown = dropdown.classList.contains('hidden') ? null : button;
    });
  });
});
</script>
