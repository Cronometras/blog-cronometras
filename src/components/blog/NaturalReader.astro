---
interface Props {
  text: string;
  lang: string;
}

const { text, lang } = Astro.props;

// Textos según el idioma
const readText = lang === 'es' ? 'Leer en voz alta' : 'Read aloud';
const pauseText = lang === 'es' ? 'Pausar' : 'Pause';
const resumeText = lang === 'es' ? 'Continuar' : 'Resume';
const stopText = lang === 'es' ? 'Detener' : 'Stop';
const errorText = lang === 'es' ? 'Error: Toca para reintentar' : 'Error: Tap to retry';

// Limitar longitud del texto para evitar problemas
const maxLength = 5000;
const plainText = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
---

<div class="natural-reader flex flex-wrap gap-2 items-center">
  <button
    id="read-button"
    class="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors duration-200"
    aria-label={readText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243a1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828a1 1 0 010-1.415z" clip-rule="evenodd" />
    </svg>
    <span id="button-text">{readText}</span>
  </button>

  <button
    id="stop-button"
    class="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 opacity-50 cursor-not-allowed"
    disabled
    aria-label={stopText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
    </svg>
    <span>{stopText}</span>
  </button>

  <!-- Controles adicionales -->
  <div id="reader-controls" class="hidden w-full mt-2 flex flex-col gap-2">
    <div class="flex flex-wrap gap-2 items-center">
      <!-- Control de velocidad -->
      <div class="flex items-center gap-2">
        <label for="speed-control" class="text-sm text-gray-600 dark:text-gray-400">
          {lang === 'es' ? 'Velocidad:' : 'Speed:'}
        </label>
        <select
          id="speed-control"
          class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded px-2 py-1 text-sm"
        >
          <option value="0.7">{lang === 'es' ? 'Lenta' : 'Slow'}</option>
          <option value="0.9" selected>{lang === 'es' ? 'Normal' : 'Normal'}</option>
          <option value="1.1">{lang === 'es' ? 'Rápida' : 'Fast'}</option>
          <option value="1.3">{lang === 'es' ? 'Muy rápida' : 'Very fast'}</option>
        </select>
      </div>

      <!-- Indicador de progreso -->
      <div id="progress-container" class="flex-grow h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
        <div id="progress-bar" class="h-full bg-primary rounded-full" style="width: 0%"></div>
      </div>
    </div>

    <!-- Mensaje informativo sobre lectura en segundo plano -->
    <div class="text-xs text-gray-500 dark:text-gray-400 italic">
      {lang === 'es'
        ? 'La lectura intentará continuar cuando la pantalla se apague. Para mejores resultados, mantén la pantalla encendida.'
        : 'Reading will try to continue when the screen turns off. For best results, keep the screen on.'}
    </div>
    <!-- Mensaje de compatibilidad -->
    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
      {lang === 'es'
        ? 'La compatibilidad varía según el dispositivo y navegador.'
        : 'Compatibility varies by device and browser.'}
    </div>
  </div>
</div>

<!-- Contenedor oculto para el texto -->
<div id="article-text" class="hidden" aria-hidden="true">{plainText}</div>

<script define:vars={{ lang, readText, pauseText, resumeText, stopText, errorText }}>
// Estados del reproductor
const STATES = {
  STOPPED: 'stopped',
  PLAYING: 'playing',
  PAUSED: 'paused',
  ERROR: 'error'
};

// Clase para manejar la síntesis de voz con un enfoque de fragmentos naturales
class NaturalReader {
  constructor() {
    this.state = STATES.STOPPED;
    this.readButton = document.getElementById('read-button');
    this.buttonText = document.getElementById('button-text');
    this.stopButton = document.getElementById('stop-button');
    this.articleText = document.getElementById('article-text');
    this.readerControls = document.getElementById('reader-controls');
    this.progressContainer = document.getElementById('progress-container');
    this.progressBar = document.getElementById('progress-bar');
    this.speedControl = document.getElementById('speed-control');

    this.text = this.articleText ? this.articleText.textContent || '' : '';
    this.lang = lang || 'en';
    this.utterance = null;
    this.chunks = [];
    this.currentChunk = 0;
    this.totalChunks = 0;
    this.shouldContinue = false;
    this.speechRate = 0.9; // Velocidad predeterminada
    this.wakeLock = null; // Para mantener la pantalla encendida
    this.visibilityHandler = null; // Manejador para eventos de visibilidad
    this.keepAliveInterval = null; // Intervalo para mantener activo el proceso
    this.silentAudio = null; // Audio silencioso para mantener activo el proceso de audio
    this.backgroundWorker = null; // Worker en segundo plano para mantener activo el proceso
    this.mediaSession = null; // Sesión de media para control en la pantalla de bloqueo

    // Detectar tipo de dispositivo y navegador
    this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.isAndroid = /Android/i.test(navigator.userAgent);
    this.isChrome = /Chrome/i.test(navigator.userAgent);
    this.isSafari = /Safari/i.test(navigator.userAgent) && !/Chrome/i.test(navigator.userAgent);
    this.isEdge = /Edg/i.test(navigator.userAgent);

    // Verificar soporte de síntesis de voz
    this.speechSynthesisSupported = 'speechSynthesis' in window;

    this.init();
  }

  init() {
    if (!this.readButton || !this.stopButton || !this.text) return;

    // Limpiar y dividir el texto en fragmentos naturales
    this.prepareTextChunks();

    // Inicializar eventos
    this.readButton.addEventListener('click', () => this.toggleReading());
    this.stopButton.addEventListener('click', () => this.stopReading());

    // Evento para el control de velocidad
    if (this.speedControl) {
      this.speedControl.addEventListener('change', () => {
        this.speechRate = parseFloat(this.speedControl.value) || 0.9;
        console.log(`Velocidad de lectura cambiada a: ${this.speechRate}`);
      });
    }

    // Inicializar síntesis de voz
    if (this.speechSynthesisSupported) {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();

      // Fix para Safari en iOS
      if (this.isIOS) {
        document.addEventListener('touchstart', () => {
          window.speechSynthesis.cancel();
        }, { once: true });
      }

      // Configurar manejo de visibilidad para continuar la lectura en segundo plano
      this.setupVisibilityHandling();
    } else {
      this.updateState(STATES.ERROR);
    }

    // Limpiar al navegar a otra página
    window.addEventListener('beforeunload', () => this.stopReading());
    document.addEventListener('astro:before-swap', () => this.stopReading());

    console.log('NaturalReader inicializado:', {
      isMobile: this.isMobile,
      isIOS: this.isIOS,
      isAndroid: this.isAndroid,
      isChrome: this.isChrome,
      isSafari: this.isSafari,
      isEdge: this.isEdge,
      speechSupported: this.speechSynthesisSupported,
      textLength: this.text.length,
      chunks: this.chunks.length
    });
  }

  // Dividir el texto en fragmentos para una lectura más natural
  prepareTextChunks() {
    // Primero, limpiar el texto de caracteres especiales y HTML
    const cleanText = this.text
      .replace(/<[^>]*>/g, '') // Eliminar etiquetas HTML
      .replace(/\\s+/g, ' ')   // Normalizar espacios
      .trim();

    // Tamaño de fragmento optimizado para una lectura natural
    // pero lo suficientemente pequeño para evitar problemas en móviles
    const chunkSize = this.isMobile ? 150 : 300;

    // Dividir por párrafos primero para respetar la estructura del texto
    const paragraphs = cleanText.split(/\\n+/);

    if (paragraphs.length <= 1) {
      // Si no hay párrafos claros, dividir por oraciones
      const sentences = cleanText.match(/[^.!?]+[.!?]+/g) || [];

      if (sentences.length === 0) {
        // Si no hay oraciones, dividir por longitud
        for (let i = 0; i < cleanText.length; i += chunkSize) {
          this.chunks.push(cleanText.substring(i, i + chunkSize));
        }
      } else {
        // Agrupar oraciones en fragmentos más grandes para una lectura más natural
        let currentChunk = '';

        for (const sentence of sentences) {
          // Si añadir esta oración excedería el tamaño máximo, guardar el fragmento actual
          if (currentChunk.length + sentence.length > chunkSize && currentChunk.length > 0) {
            this.chunks.push(currentChunk);
            currentChunk = sentence;
          } else {
            currentChunk += sentence;
          }
        }

        // Añadir el último fragmento si queda algo
        if (currentChunk.length > 0) {
          this.chunks.push(currentChunk);
        }
      }
    } else {
      // Procesar cada párrafo
      for (const paragraph of paragraphs) {
        if (paragraph.trim().length === 0) continue;

        // Si el párrafo es más corto que el tamaño máximo, usarlo como un fragmento
        if (paragraph.length <= chunkSize) {
          this.chunks.push(paragraph);
        } else {
          // Dividir párrafos largos por oraciones
          const sentences = paragraph.match(/[^.!?]+[.!?]+/g) || [paragraph];
          let currentChunk = '';

          for (const sentence of sentences) {
            // Si añadir esta oración excedería el tamaño máximo, guardar el fragmento actual
            if (currentChunk.length + sentence.length > chunkSize && currentChunk.length > 0) {
              this.chunks.push(currentChunk);
              currentChunk = sentence;
            } else {
              currentChunk += sentence;
            }
          }

          // Añadir el último fragmento si queda algo
          if (currentChunk.length > 0) {
            this.chunks.push(currentChunk);
          }
        }
      }
    }

    // Si no hay fragmentos, crear uno con el texto limpio
    if (this.chunks.length === 0) {
      this.chunks.push(cleanText.substring(0, 1000)); // Limitar a 1000 caracteres como máximo
    }

    // Limitar el número total de fragmentos para evitar problemas
    if (this.chunks.length > 100) {
      this.chunks = this.chunks.slice(0, 100);
    }

    this.totalChunks = this.chunks.length;
    console.log(`Texto dividido en ${this.chunks.length} fragmentos para lectura natural`);
  }

  // Alternar entre reproducir y pausar
  toggleReading() {
    switch (this.state) {
      case STATES.STOPPED:
      case STATES.ERROR:
        this.startReading();
        break;
      case STATES.PLAYING:
        this.pauseReading();
        break;
      case STATES.PAUSED:
        this.resumeReading();
        break;
    }
  }

  // Iniciar la lectura
  startReading() {
    if (!this.speechSynthesisSupported) {
      this.updateState(STATES.ERROR);
      return;
    }

    try {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();

      // Reiniciar el índice de fragmentos
      this.currentChunk = 0;
      this.shouldContinue = true;

      // Mostrar los controles adicionales
      if (this.readerControls) {
        this.readerControls.classList.remove('hidden');
      }

      // Configurar la MediaSession API para control desde la pantalla de bloqueo
      this.setupMediaSession();

      // Iniciar la lectura del primer fragmento
      this.updateState(STATES.PLAYING);
      this.speakNextChunk();
    } catch (error) {
      console.error('Error al iniciar la lectura:', error);
      this.updateState(STATES.ERROR);
    }
  }

  // Configurar la MediaSession API para control desde la pantalla de bloqueo
  setupMediaSession() {
    if ('mediaSession' in navigator) {
      try {
        // Obtener el título del artículo
        const articleTitle = document.querySelector('h1')?.textContent || 'Artículo';

        // Configurar metadatos de la sesión multimedia
        navigator.mediaSession.metadata = new MediaMetadata({
          title: articleTitle,
          artist: 'Cronometras',
          album: 'Lectura de artículo',
          artwork: [
            { src: '/favicon.png', sizes: '96x96', type: 'image/png' }
          ]
        });

        // Configurar manejadores de acciones
        navigator.mediaSession.setActionHandler('play', () => {
          if (this.state === STATES.PAUSED) {
            this.resumeReading();
          }
        });

        navigator.mediaSession.setActionHandler('pause', () => {
          if (this.state === STATES.PLAYING) {
            this.pauseReading();
          }
        });

        navigator.mediaSession.setActionHandler('stop', () => {
          this.stopReading();
        });

        // Guardar referencia a la sesión multimedia
        this.mediaSession = navigator.mediaSession;
      } catch (e) {
        console.error('Error al configurar MediaSession:', e);
      }
    }
  }

  // Reproducir el siguiente fragmento
  speakNextChunk() {
    if (!this.shouldContinue || this.currentChunk >= this.chunks.length) {
      // Hemos terminado todos los fragmentos o se ha detenido la lectura
      this.updateState(STATES.STOPPED);
      return;
    }

    try {
      const chunkText = this.chunks[this.currentChunk];

      // Actualizar la barra de progreso
      this.updateProgressBar();

      // Crear una nueva instancia de SpeechSynthesisUtterance
      this.utterance = new SpeechSynthesisUtterance(chunkText);
      this.utterance.lang = this.lang === 'es' ? 'es-ES' : 'en-US';
      this.utterance.rate = this.speechRate; // Usar la velocidad seleccionada por el usuario

      // Seleccionar una voz adecuada
      const voices = window.speechSynthesis.getVoices();
      const langCode = this.lang === 'es' ? 'es' : 'en';

      // Buscar una voz adecuada
      let voice = voices.find(v => v.lang.startsWith(langCode) && v.localService);
      if (!voice) {
        voice = voices.find(v => v.lang.startsWith(langCode));
      }

      if (voice) {
        this.utterance.voice = voice;
      }

      // Configurar eventos
      this.utterance.onend = () => {
        // Pasar al siguiente fragmento
        this.currentChunk++;

        // Si hay más fragmentos y debemos continuar, reproducir el siguiente
        if (this.shouldContinue && this.currentChunk < this.chunks.length) {
          // Pausa mínima entre fragmentos para evitar problemas técnicos
          // pero lo suficientemente corta para que la lectura sea fluida
          setTimeout(() => {
            this.speakNextChunk();
          }, 5);
        } else {
          // Hemos terminado todos los fragmentos o se ha detenido la lectura
          this.updateState(STATES.STOPPED);
        }
      };

      this.utterance.onerror = (event) => {
        console.error('Error en la síntesis de voz:', event);

        // Si es un error de interrupción, intentar con el siguiente fragmento
        if (event.error === 'interrupted' || event.error === 'canceled') {
          if (this.shouldContinue) {
            this.currentChunk++;
            if (this.currentChunk < this.chunks.length) {
              setTimeout(() => {
                this.speakNextChunk();
              }, 100);
            } else {
              this.updateState(STATES.STOPPED);
            }
          }
        } else {
          this.updateState(STATES.ERROR);
        }
      };

      // Iniciar la reproducción
      window.speechSynthesis.speak(this.utterance);
    } catch (error) {
      console.error('Error al reproducir fragmento:', error);

      // Intentar con el siguiente fragmento
      this.currentChunk++;
      if (this.shouldContinue && this.currentChunk < this.chunks.length) {
        setTimeout(() => {
          this.speakNextChunk();
        }, 100);
      } else {
        this.updateState(STATES.ERROR);
      }
    }
  }

  // Actualizar la barra de progreso
  updateProgressBar() {
    if (this.progressBar && this.totalChunks > 0) {
      const progress = (this.currentChunk / this.totalChunks) * 100;
      this.progressBar.style.width = `${progress}%`;
    }
  }

  // Pausar la lectura
  pauseReading() {
    if (!this.speechSynthesisSupported) return;

    try {
      this.shouldContinue = false;
      window.speechSynthesis.cancel();
      this.updateState(STATES.PAUSED);
    } catch (error) {
      console.error('Error al pausar la lectura:', error);
      this.stopReading();
    }
  }

  // Reanudar la lectura
  resumeReading() {
    if (!this.speechSynthesisSupported) return;

    try {
      this.shouldContinue = true;
      this.updateState(STATES.PLAYING);
      this.speakNextChunk();
    } catch (error) {
      console.error('Error al reanudar la lectura:', error);
      this.stopReading();
    }
  }

  // Detener la lectura
  stopReading() {
    if (!this.speechSynthesisSupported) return;

    try {
      this.shouldContinue = false;
      window.speechSynthesis.cancel();
      this.currentChunk = 0;
      this.updateState(STATES.STOPPED);

      // Ocultar los controles adicionales
      if (this.readerControls) {
        this.readerControls.classList.add('hidden');
        if (this.progressBar) {
          this.progressBar.style.width = '0%';
        }
      }

      // Liberar recursos
      this.releaseWakeLock();
      this.stopKeepAlive();
    } catch (error) {
      console.error('Error al detener la lectura:', error);
    }
  }

  // Limpiar recursos y eventos al desmontar el componente
  cleanup() {
    // Detener la lectura
    this.stopReading();

    // Eliminar el manejador de visibilidad
    if (this.visibilityHandler) {
      document.removeEventListener('visibilitychange', this.visibilityHandler);
      this.visibilityHandler = null;
    }

    // Liberar Wake Lock
    this.releaseWakeLock();

    // Detener el intervalo de mantenimiento y limpiar recursos
    this.stopKeepAlive();

    // Limpiar MediaSession
    if ('mediaSession' in navigator && this.mediaSession) {
      try {
        // Eliminar manejadores de acciones
        navigator.mediaSession.setActionHandler('play', null);
        navigator.mediaSession.setActionHandler('pause', null);
        navigator.mediaSession.setActionHandler('stop', null);
        this.mediaSession = null;
      } catch (e) {
        console.error('Error al limpiar MediaSession:', e);
      }
    }

    // Asegurarse de que la síntesis de voz se detenga completamente
    if (window.speechSynthesis) {
      try {
        window.speechSynthesis.cancel();
      } catch (e) {
        console.error('Error al cancelar síntesis de voz:', e);
      }
    }
  }

  // Configurar manejo de visibilidad para continuar la lectura en segundo plano
  setupVisibilityHandling() {
    // Manejar cambios de visibilidad (cuando la app pasa a segundo plano)
    this.visibilityHandler = () => {
      if (this.state === STATES.PLAYING) {
        if (document.hidden) {
          // La página está en segundo plano
          console.log('Página en segundo plano, manteniendo la lectura activa...');
          this.startKeepAlive();
        } else {
          // La página vuelve a estar visible
          console.log('Página visible de nuevo');
          this.stopKeepAlive();
        }
      }
    };

    document.addEventListener('visibilitychange', this.visibilityHandler);
  }

  // Solicitar Wake Lock para mantener la pantalla encendida
  async requestWakeLock() {
    if ('wakeLock' in navigator) {
      try {
        this.wakeLock = await navigator.wakeLock.request('screen');
        console.log('Wake Lock activado');

        // Manejar la liberación del Wake Lock
        this.wakeLock.addEventListener('release', () => {
          console.log('Wake Lock liberado');
          this.wakeLock = null;
        });
      } catch (err) {
        console.error('Error al solicitar Wake Lock:', err);
      }
    } else {
      console.log('Wake Lock API no soportada en este navegador');
    }
  }

  // Liberar Wake Lock
  releaseWakeLock() {
    if (this.wakeLock) {
      try {
        this.wakeLock.release();
        this.wakeLock = null;
      } catch (err) {
        console.error('Error al liberar Wake Lock:', err);
      }
    }
  }

  // Iniciar intervalo para mantener activo el proceso en segundo plano
  startKeepAlive() {
    // Detener cualquier intervalo existente
    this.stopKeepAlive();

    // Crear un audio silencioso para mantener activo el proceso de audio
    this.createSilentAudio();

    // Crear un nuevo intervalo que mantenga activo el proceso (más frecuente)
    this.keepAliveInterval = setInterval(() => {
      if (this.state === STATES.PLAYING) {
        // Verificar si la síntesis de voz sigue activa
        if (!window.speechSynthesis.speaking) {
          // Si no está hablando pero debería estarlo, continuar con el siguiente fragmento
          this.currentChunk++;
          if (this.currentChunk < this.chunks.length) {
            this.speakNextChunk();
          } else {
            this.updateState(STATES.STOPPED);
            this.stopKeepAlive();
          }
        } else {
          // Mantener activa la síntesis de voz con una técnica más agresiva
          window.speechSynthesis.pause();
          setTimeout(() => {
            if (this.state === STATES.PLAYING) {
              window.speechSynthesis.resume();
            }
          }, 50);

          // Reproducir un breve sonido silencioso para mantener activo el proceso de audio
          this.playSilentSound();

          // Solicitar un wake lock de nuevo si se ha liberado
          if (!this.wakeLock) {
            this.requestWakeLock();
          }

          // Usar vibración (si está disponible) para mantener activo el dispositivo
          if ('vibrate' in navigator) {
            try {
              navigator.vibrate(1); // Vibración imperceptible de 1ms
            } catch (e) {
              // Ignorar errores de vibración
            }
          }
        }
      } else {
        this.stopKeepAlive();
      }
    }, 1000); // Verificar cada segundo (más frecuente)

    // Crear un worker en segundo plano para mantener activo el proceso
    this.createBackgroundWorker();
  }

  // Crear un audio silencioso para mantener activo el proceso de audio
  createSilentAudio() {
    try {
      // Eliminar cualquier audio anterior
      if (this.silentAudio) {
        this.silentAudio.pause();
        this.silentAudio = null;
      }

      // Crear un nuevo elemento de audio con un sonido silencioso
      this.silentAudio = new Audio();

      // Usar un data URI con un sonido silencioso muy corto
      this.silentAudio.src = 'data:audio/mp3;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
      this.silentAudio.loop = true;
      this.silentAudio.volume = 0.01; // Volumen muy bajo

      // Configurar para reproducción en segundo plano (iOS)
      if (this.isIOS) {
        this.silentAudio.setAttribute('playsinline', '');
        this.silentAudio.setAttribute('webkit-playsinline', '');
      }
    } catch (e) {
      console.error('Error al crear audio silencioso:', e);
    }
  }

  // Reproducir un breve sonido silencioso
  playSilentSound() {
    try {
      if (this.silentAudio) {
        // Asegurarse de que el audio esté reproduciéndose
        const playPromise = this.silentAudio.play();

        if (playPromise !== undefined) {
          playPromise.catch(e => {
            // Auto-reproducción bloqueada, intentar después de interacción del usuario
            console.log('Auto-reproducción bloqueada, se requiere interacción del usuario');
          });
        }
      }
    } catch (e) {
      console.error('Error al reproducir sonido silencioso:', e);
    }
  }

  // Crear un worker en segundo plano para mantener activo el proceso
  createBackgroundWorker() {
    try {
      // Eliminar cualquier worker anterior
      if (this.backgroundWorker) {
        this.backgroundWorker.terminate();
        this.backgroundWorker = null;
      }

      // Crear un nuevo worker con un código simple que se ejecute periódicamente
      const workerCode = `
        setInterval(() => {
          self.postMessage('keepAlive');
        }, 500);
      `;

      // Crear un blob con el código del worker
      const blob = new Blob([workerCode], { type: 'application/javascript' });
      const workerUrl = URL.createObjectURL(blob);

      // Crear el worker
      this.backgroundWorker = new Worker(workerUrl);

      // Configurar el manejador de mensajes
      this.backgroundWorker.onmessage = (e) => {
        if (e.data === 'keepAlive' && this.state === STATES.PLAYING) {
          // Mantener activa la síntesis de voz si es necesario
          if (window.speechSynthesis.speaking && Math.random() < 0.1) { // 10% de probabilidad
            window.speechSynthesis.pause();
            setTimeout(() => {
              if (this.state === STATES.PLAYING) {
                window.speechSynthesis.resume();
              }
            }, 10);
          }
        }
      };

      // Limpiar la URL del blob cuando ya no se necesite
      URL.revokeObjectURL(workerUrl);
    } catch (e) {
      console.error('Error al crear worker en segundo plano:', e);
    }
  }

  // Detener el intervalo de mantenimiento y limpiar recursos
  stopKeepAlive() {
    // Detener el intervalo principal
    if (this.keepAliveInterval) {
      clearInterval(this.keepAliveInterval);
      this.keepAliveInterval = null;
    }

    // Detener el audio silencioso
    if (this.silentAudio) {
      try {
        this.silentAudio.pause();
        this.silentAudio.src = '';
        this.silentAudio = null;
      } catch (e) {
        console.error('Error al detener audio silencioso:', e);
      }
    }

    // Terminar el worker en segundo plano
    if (this.backgroundWorker) {
      try {
        this.backgroundWorker.terminate();
        this.backgroundWorker = null;
      } catch (e) {
        console.error('Error al terminar worker:', e);
      }
    }
  }

  // Actualizar el estado y la interfaz
  updateState(newState) {
    this.state = newState;

    // Actualizar la interfaz según el estado
    if (this.readButton && this.buttonText && this.stopButton) {
      switch (newState) {
        case STATES.PLAYING:
          this.buttonText.textContent = pauseText;
          this.readButton.classList.remove('bg-primary', 'hover:bg-primary/90', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-yellow-600', 'hover:bg-yellow-700');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');

          // Solicitar Wake Lock para mantener la pantalla encendida
          this.requestWakeLock();
          break;
        case STATES.PAUSED:
          this.buttonText.textContent = resumeText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');

          // Liberar Wake Lock
          this.releaseWakeLock();
          break;
        case STATES.STOPPED:
          this.buttonText.textContent = readText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');

          // Liberar Wake Lock
          this.releaseWakeLock();
          // Detener el intervalo de mantenimiento
          this.stopKeepAlive();
          break;
        case STATES.ERROR:
          this.buttonText.textContent = errorText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-primary', 'hover:bg-primary/90');
          this.readButton.classList.add('bg-red-600', 'hover:bg-red-700');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');

          // Liberar Wake Lock
          this.releaseWakeLock();
          // Detener el intervalo de mantenimiento
          this.stopKeepAlive();
          break;
      }
    }
  }
}

// Inicializar cuando el DOM esté cargado
let readerInstance = null;

document.addEventListener('DOMContentLoaded', () => {
  readerInstance = new NaturalReader();
});

// Limpiar recursos cuando se desmonta el componente
document.addEventListener('astro:before-swap', () => {
  if (readerInstance) {
    readerInstance.cleanup();
    readerInstance = null;
  }
});

// Limpiar recursos cuando se cierra la página
window.addEventListener('beforeunload', () => {
  if (readerInstance) {
    readerInstance.cleanup();
    readerInstance = null;
  }
});
</script>

<style>
  /* Estilos específicos para móviles */
  @media (max-width: 640px) {
    .natural-reader button {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      touch-action: manipulation;
    }
  }

  /* Animación para la barra de progreso */
  #progress-bar {
    transition: width 0.3s ease-in-out;
  }
</style>
