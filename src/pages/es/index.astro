---
import Base from "@/layouts/Base.astro";
import Section from "@/components/core/Section.astro";
import Features from "@/components/Features.astro";
import Testimonial from "@/components/Testimonial.astro";
import HowItWorks from "@/layouts/components/HowItWorks.astro";
import Cta from "@/layouts/partials/Cta.astro";
import { getCollection } from "astro:content";
import Colaboramos from "@/layouts/components/Colaboramos.astro";
import { RequestDemoFormIsland } from "@/components/react/ReactIslands";
import VideoTutorialModal from "@/components/core/VideoTutorialModal.astro";

const homepageEntries = await getCollection("homepage");
console.log("Available entries:", homepageEntries.map(entry => ({
  id: entry.id,
  slug: entry.slug,
  collection: entry.collection
})));

// Intentar diferentes patrones de ID
const possibleIds = ["es/index", "es/index.md", "es/index/index.md", "es"];
let homepage;

for (const id of possibleIds) {
  homepage = homepageEntries.find(entry => entry.id === id);
  if (homepage) {
    console.log("Found homepage with ID:", id);
    break;
  }
}

if (!homepage) {
  console.error("Could not find homepage with any of these IDs:", possibleIds);
  console.error("Available entries:", homepageEntries.map(entry => entry.id));
  throw new Error("Homepage content not found for Spanish version");
}

const { banner, sections = [], features, testimonial, how_it_works, colaboramos } = homepage.data;
const call_to_action = homepage.data.call_to_action;
---

<Base>
  <!-- banner -->
  <section class="lg:mb-10 animate-fade-in">
    <Section section={banner} />
  </section>

  <!-- key features -->
  <Features features={features} />

  <!-- multi section -->
  {
    sections && (
      <section class="multi-section">
        {sections.map((section) => (
          <Section section={section} />
        ))}
      </section>
    )
  }

  <!-- how it works -->
  <HowItWorks how_it_works={how_it_works} />

  <!-- Colaboramos -->
  <Colaboramos colaboramos={colaboramos} />

  <!-- testimonial -->
 <!-- <Testimonial testimonial={testimonial} /> -->
  <!-- call to action -->
  <Cta {...call_to_action} />

  <!-- Modal de video tutorial -->
  <VideoTutorialModal />
</Base>

<script is:inline>
  // Definir una función global para inicializar los botones
  window.initializePageButtons = function() {
    console.log("Initializing page buttons in Spanish page");

    // Función para mostrar/ocultar el botón flotante
    const toggleFloatingButton = () => {
      const floatingButton = document.getElementById('floating-contact-button');
      if (floatingButton) {
        // Mostrar el botón en todas las páginas
        floatingButton.style.display = 'flex';
      }
    };

    // Llamar a la función cuando se carga la página
    toggleFloatingButton();

    // Look for all buttons that might be related to demo
    const buttons = document.querySelectorAll('a.btn, button.btn, a.button, button.button');
    console.log("Found buttons:", buttons.length);

    buttons.forEach((button, index) => {
      const buttonText = button.innerText.trim();
      console.log(`Button ${index} text:`, buttonText);

      if (buttonText.includes('Solicitar Demo') ||
          buttonText.includes('Comenzar Ahora') ||
          buttonText.includes('Comenzar ahora') ||
          buttonText.includes('Demo Gratuita')) {

        console.log(`Configuring demo button ${index}:`, buttonText);

        console.log("Converting to button element to prevent URL issues");

        // Crear un nuevo botón que reemplazará al enlace
        const newButton = document.createElement('button');

        // Copiar todas las clases y estilos del enlace original
        newButton.className = button.className;
        newButton.innerHTML = button.innerHTML;
        newButton.style.cssText = button.style.cssText;
        newButton.style.cursor = 'pointer';

        // Agregar el atributo onclick directamente
        newButton.setAttribute('onclick', 'window.openRequestDemoModal()');

        // Agregar el event listener
        newButton.addEventListener('click', function(e) {
          console.log("Demo button clicked");
          window.openRequestDemoModal();
        });

        // Reemplazar el enlace con el nuevo botón
        button.parentNode.replaceChild(newButton, button);
      }

      // Check for video buttons
      if (buttonText === 'Ver Video Tutorial' ||
          buttonText.includes('Ver Video Tutorial') ||
          buttonText.includes('Ver Demo') ||
          (button.getAttribute('href') === '#video')) {

        console.log(`Configuring video button ${index}:`, buttonText);

        console.log("Converting to button element to prevent URL issues");

        // Crear un nuevo botón que reemplazará al enlace
        const newButton = document.createElement('button');

        // Copiar todas las clases y estilos del enlace original
        newButton.className = button.className;
        newButton.innerHTML = button.innerHTML;
        newButton.style.cssText = button.style.cssText;
        newButton.style.cursor = 'pointer';

        // Agregar el atributo onclick directamente
        newButton.setAttribute('onclick', 'window.openVideoTutorialModal()');

        // Agregar el event listener
        newButton.addEventListener('click', function(e) {
          console.log("Video tutorial button clicked");
          window.openVideoTutorialModal();
        });

        // Reemplazar el enlace con el nuevo botón
        button.parentNode.replaceChild(newButton, button);
      }
    });

    // Look specifically for the main CTA button with ID
    const mainCtaButton = document.getElementById('main-cta-button');
    if (mainCtaButton) {
      console.log("Main CTA button found:", mainCtaButton.innerText);

      console.log("Converting main CTA to button element to prevent URL issues");

      // Crear un nuevo botón que reemplazará al enlace
      const newButton = document.createElement('button');

      // Copiar todas las clases y estilos del enlace original
      newButton.className = mainCtaButton.className;
      newButton.innerHTML = mainCtaButton.innerHTML;
      newButton.style.cssText = mainCtaButton.style.cssText;
      newButton.style.cursor = 'pointer';
      newButton.id = mainCtaButton.id; // Mantener el ID

      // Agregar el atributo onclick directamente
      newButton.setAttribute('onclick', 'window.openRequestDemoModal()');

      // Agregar el event listener
      newButton.addEventListener('click', function(e) {
        console.log("Main CTA button clicked");
        window.openRequestDemoModal();
      });

      // Reemplazar el enlace con el nuevo botón
      mainCtaButton.parentNode.replaceChild(newButton, mainCtaButton);
    } else {
      console.log("Main CTA button with id main-cta-button not found");

      // Look for class selector as fallback
      const ctaButton = document.querySelector('.call-to-action a.btn, .call-to-action button.btn, .call-to-action a.button, .call-to-action button.button');
      if (ctaButton) {
        console.log("CTA button found by class:", ctaButton.innerText);

        console.log("Converting CTA to button element to prevent URL issues");

        // Crear un nuevo botón que reemplazará al enlace
        const newButton = document.createElement('button');

        // Copiar todas las clases y estilos del enlace original
        newButton.className = ctaButton.className;
        newButton.innerHTML = ctaButton.innerHTML;
        newButton.style.cssText = ctaButton.style.cssText;
        newButton.style.cursor = 'pointer';

        // Agregar el atributo onclick directamente
        newButton.setAttribute('onclick', 'window.openRequestDemoModal()');

        // Agregar el event listener
        newButton.addEventListener('click', function(e) {
          console.log("End of page CTA button clicked");
          window.openRequestDemoModal();
        });

        // Reemplazar el enlace con el nuevo botón
        ctaButton.parentNode.replaceChild(newButton, ctaButton);
      } else {
        console.log("End of page CTA button not found by class");
      }
    }

    // Check if global functions are available
    console.log("openRequestDemoModal available:", typeof window.openRequestDemoModal === 'function');
    console.log("openVideoTutorialModal available:", typeof window.openVideoTutorialModal === 'function');
  };

  // Ejecutar la inicialización cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', function() {
    console.log("DOMContentLoaded in Spanish main page");
    window.initializePageButtons();

    // También llamar a la función cuando cambia la URL (para navegación SPA)
    window.addEventListener('popstate', function() {
      console.log("URL changed, reinitializing buttons");
      window.initializePageButtons();
    });
  });

  // También ejecutar cuando la página se cargue completamente
  window.addEventListener('load', function() {
    console.log("Window load event in Spanish main page");
    window.initializePageButtons();

    // Verificar si hay un hash en la URL y actuar en consecuencia
    if (window.location.hash === '#video') {
      console.log("Found #video hash in URL, opening video modal");
      setTimeout(function() {
        if (typeof window.openVideoTutorialModal === 'function') {
          window.openVideoTutorialModal();
        }
      }, 500); // Pequeño retraso para asegurar que todo esté cargado
    }
  });
</script>
