---
import { getCollection } from 'astro:content';
import Base from '@/layouts/Base.astro';
import TextToSpeech from '@/components/blog/TextToSpeech.astro';
import ResponsiveVoiceReader from '@/components/blog/ResponsiveVoiceReader.astro';
import BlogPostSchema from '@/components/blog/BlogPostSchema.astro';
import RelatedBlogPosts from '@/components/RelatedBlogPosts.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  console.log(`Total de posts encontrados: ${posts.length}`);

  const paths = [];

  for (const post of posts) {
    // Dividir el slug en partes para obtener el idioma y el resto del slug
    const slugParts = post.slug.split('/');
    const lang = slugParts[0];
    const slug = slugParts.slice(1).join('/');

    console.log(`Generando ruta estática para: lang=${lang}, slug=${slug}, id=${post.id}`);

    paths.push({
      params: { lang, slug },
      props: { post },
    });
  }

  console.log(`Total de rutas generadas: ${paths.length}`);
  return paths;
}

const { post } = Astro.props;
const { lang, slug } = Astro.params;

console.log(`Renderizando post: lang=${lang}, slug=${slug}, id=${post?.id || 'undefined'}`);

// Verificar que post y post.render estén definidos antes de utilizarlos
let Content;
let errorMessage = '';

try {
  if (!post) {
    throw new Error(`Post no encontrado o indefinido. Parámetros: lang=${lang}, slug=${slug}`);
  }

  if (typeof post.render !== 'function') {
    throw new Error(`La función render no está disponible en el post. Post id: ${post.id}, slug: ${post.slug}`);
  }

  const rendered = await post.render();
  Content = rendered.Content;
  console.log(`Post renderizado exitosamente: ${post.id}`);
} catch (error) {
  console.error('Error al renderizar el post:', error);
  errorMessage = 'No se pudo cargar el contenido del post.';
}

// Extract text content for text-to-speech
const rawContent = post?.body || '';

// Prerender para generar páginas estáticas durante la compilación
export const prerender = true;
---

<Base title={post?.data?.title || 'Blog Post'} description={post?.data?.description || ''}>
  {post && <BlogPostSchema post={post} url={Astro.url} />}
  <article class="mx-auto">
    <!-- Hero Image with Overlay -->
    <div class="relative h-[40vh] md:h-[50vh] lg:h-[60vh] min-h-[300px] w-full mb-6 md:mb-12">
      <img
        src={post?.data?.heroImage || '/images/cronometras App.png'}
        alt={post?.data?.title || 'Blog Post'}
        class="absolute inset-0 w-full h-full object-cover"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-black/90 to-black/60"></div>
      <div class="absolute inset-0 flex flex-col justify-end p-4 md:p-8 container mx-auto">
        <div class="text-white mb-4 md:mb-8 max-w-4xl mx-auto w-full">
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 md:mb-6 leading-tight">{post?.data?.title || 'Blog Post'}</h1>
          <div class="flex flex-wrap items-center gap-2 md:gap-4 text-gray-200 mb-3 md:mb-4 text-sm md:text-base">
            {post?.data?.pubDate && (
              <time datetime={post.data.pubDate.toISOString()} class="font-medium">
                {post.data.pubDate.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                })}
              </time>
            )}
            {post?.data?.author && (
              <>
                <span>•</span>
                <span class="font-medium">{post.data.author}</span>
              </>
            )}
          </div>
          {post?.data?.description && (
            <p class="text-base md:text-lg lg:text-xl text-gray-100 leading-relaxed">{post.data.description}</p>
          )}
          <div class="mt-4 md:mt-8">
            <ResponsiveVoiceReader text={rawContent} lang={lang || 'en'} />
          </div>
        </div>
      </div>
    </div>

    <!-- Article Content -->
    <section class="section py-8 md:py-16 bg-white dark:bg-gray-900">
      <div class="container px-4 md:px-8 mx-auto">
        <div class="max-w-3xl mx-auto">
          <div class="article-content prose prose-base md:prose-lg dark:prose-invert">
            {Content ? <Content /> : <p class="text-center text-red-500">{errorMessage}</p>}
          </div>

          <!-- Separador -->
          <div class="my-12 border-t border-gray-200 dark:border-gray-700"></div>

          <!-- Artículos relacionados -->
          <div class="mt-8 md:mt-12">
            <RelatedBlogPosts language={lang} count={4} title={lang === 'es' ? "Artículos relacionados" : "Related articles"} />
          </div>
        </div>
      </div>
    </section>
  </article>
</Base>

<style is:global>
  /* Estilos base para el contenido del artículo */
  .article-content {
    @apply max-w-none;
    --tw-prose-body: #374151;
    --tw-prose-headings: #111827;
    --tw-prose-lead: #4b5563;
    --tw-prose-links: rgb(var(--primary));
    --tw-prose-bold: #111827;
    --tw-prose-counters: #6b7280;
    --tw-prose-bullets: #d1d5db;
    --tw-prose-hr: #e5e7eb;
    --tw-prose-quotes: #111827;
    --tw-prose-quote-borders: #e5e7eb;
    --tw-prose-captions: #6b7280;
    --tw-prose-code: #111827;
    --tw-prose-pre-code: #e5e7eb;
    --tw-prose-pre-bg: #1f2937;
    --tw-prose-th-borders: #d1d5db;
    --tw-prose-td-borders: #e5e7eb;
  }

  /* Estilos para modo oscuro */
  .dark .article-content {
    --tw-prose-body: #d1d5db;
    --tw-prose-headings: #f3f4f6;
    --tw-prose-lead: #9ca3af;
    --tw-prose-links: rgb(var(--primary));
    --tw-prose-bold: #f3f4f6;
    --tw-prose-counters: #9ca3af;
    --tw-prose-bullets: #4b5563;
    --tw-prose-hr: #374151;
    --tw-prose-quotes: #f3f4f6;
    --tw-prose-quote-borders: #374151;
    --tw-prose-captions: #9ca3af;
    --tw-prose-code: #f3f4f6;
    --tw-prose-pre-code: #e5e7eb;
    --tw-prose-pre-bg: #111827;
    --tw-prose-th-borders: #4b5563;
    --tw-prose-td-borders: #374151;
  }

  /* Estilos para encabezados */
  .article-content :where(h1):not(:where([class~="not-prose"] *)) {
    @apply text-2xl md:text-3xl font-bold mt-8 mb-4 leading-tight;
  }
  .article-content :where(h2):not(:where([class~="not-prose"] *)) {
    @apply text-xl md:text-2xl font-bold mt-8 mb-4 leading-tight;
  }
  .article-content :where(h3):not(:where([class~="not-prose"] *)) {
    @apply text-lg md:text-xl font-semibold mt-6 mb-3;
  }
  .article-content :where(h4):not(:where([class~="not-prose"] *)) {
    @apply text-base md:text-lg font-semibold mt-6 mb-3;
  }
  .article-content :where(h5):not(:where([class~="not-prose"] *)) {
    @apply text-base font-medium mt-4 mb-2;
  }
  .article-content :where(h6):not(:where([class~="not-prose"] *)) {
    @apply text-sm font-medium mt-4 mb-2;
  }

  /* Estilos para párrafos */
  .article-content :where(p):not(:where([class~="not-prose"] *)) {
    @apply mb-5 leading-relaxed text-base md:text-lg;
  }

  /* Estilos para enlaces */
  .article-content :where(a):not(:where([class~="not-prose"] *)) {
    @apply text-primary hover:text-opacity-80 transition-colors duration-200 font-medium;
  }

  /* Estilos para listas */
  .article-content :where(ul, ol):not(:where([class~="not-prose"] *)) {
    @apply my-5 ml-6 space-y-2;
  }

  .article-content :where(li):not(:where([class~="not-prose"] *)) {
    @apply mb-1 text-base md:text-lg;
  }

  /* Estilos para citas */
  .article-content :where(blockquote):not(:where([class~="not-prose"] *)) {
    @apply border-l-4 border-primary pl-4 italic my-6 py-1 text-gray-600 dark:text-gray-300;
  }

  /* Estilos para código */
  .article-content :where(code):not(:where([class~="not-prose"] *)) {
    @apply bg-gray-100 dark:bg-gray-800 rounded px-1.5 py-0.5 text-sm font-mono;
  }

  .article-content :where(pre):not(:where([class~="not-prose"] *)) {
    @apply bg-gray-900 dark:bg-gray-800 rounded-lg p-4 my-6 overflow-x-auto text-sm;
  }

  /* Estilos para imágenes */
  .article-content :where(img):not(:where([class~="not-prose"] *)) {
    @apply rounded-lg my-6 mx-auto shadow-md max-w-full h-auto;
  }

  /* Estilos para tablas */
  .article-content :where(table):not(:where([class~="not-prose"] *)) {
    @apply w-full my-6 text-sm md:text-base border-collapse;
  }

  .article-content :where(th):not(:where([class~="not-prose"] *)) {
    @apply py-2 px-3 bg-gray-100 dark:bg-gray-800 text-left font-semibold border-b border-gray-200 dark:border-gray-700;
  }

  .article-content :where(td):not(:where([class~="not-prose"] *)) {
    @apply py-2 px-3 border-b border-gray-200 dark:border-gray-700;
  }

  /* Estilos para líneas horizontales */
  .article-content :where(hr):not(:where([class~="not-prose"] *)) {
    @apply my-8 border-t border-gray-200 dark:border-gray-700;
  }

  /* Estilos para elementos interactivos */
  .article-content :where(button, input, select, textarea):not(:where([class~="not-prose"] *)) {
    @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50;
  }

  /* Mejoras de legibilidad */
  .article-content {
    @apply text-gray-800 dark:text-gray-200;
    font-feature-settings: "kern", "liga", "clig", "calt";
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Ajustes para dispositivos móviles */
  @media (max-width: 640px) {
    .article-content :where(p, li, blockquote):not(:where([class~="not-prose"] *)) {
      @apply text-base;
    }

    .article-content :where(h1):not(:where([class~="not-prose"] *)) {
      @apply text-2xl;
    }

    .article-content :where(h2):not(:where([class~="not-prose"] *)) {
      @apply text-xl;
    }

    .article-content :where(h3):not(:where([class~="not-prose"] *)) {
      @apply text-lg;
    }

    .article-content :where(pre, code):not(:where([class~="not-prose"] *)) {
      @apply text-xs;
    }
  }
</style>
