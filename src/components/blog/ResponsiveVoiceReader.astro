---
interface Props {
  text: string;
  lang: string;
}

const { text, lang } = Astro.props;

// Textos según el idioma
const readText = lang === 'es' ? 'Leer en voz alta' : 'Read aloud';
const stopText = lang === 'es' ? 'Detener' : 'Stop';

// Limitar longitud del texto para evitar problemas
const plainText = text.substring(0, 10000);
---

<div class="text-to-speech flex flex-wrap gap-2 items-center">
  <button
    id="read-button"
    class="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors duration-200"
    data-lang={lang}
    aria-label={readText}
  >
    <div class="relative w-5 h-5">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243a1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828a1 1 0 010-1.415z" clip-rule="evenodd" />
      </svg>
    </div>
    <span>{readText}</span>
  </button>
  <button
    id="stop-button"
    class="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 disabled:bg-red-600/50 disabled:cursor-not-allowed"
    aria-label={stopText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 8h4v4H8V8z" />
    </svg>
    <span>{stopText}</span>
  </button>
</div>

<!-- Contenido oculto para la síntesis de voz -->
<div id="article-content" class="hidden" aria-hidden="true">{plainText}</div>

<!-- Cargar ResponsiveVoice desde CDN con API key -->
<script is:inline src="https://code.responsivevoice.org/responsivevoice.js?key=3HUgCyQR"></script>

<script is:inline>
  // Esperar a que el DOM esté cargado
  document.addEventListener('DOMContentLoaded', function() {
    // Obtener referencias a los elementos
    const readButton = document.getElementById('read-button');
    const stopButton = document.getElementById('stop-button');
    const articleContent = document.getElementById('article-content');

    if (!readButton || !stopButton || !articleContent) return;

    const lang = readButton.getAttribute('data-lang') || 'en';
    const text = articleContent.textContent || '';

    // Seleccionar la voz según el idioma
    const voice = lang === 'es' ? 'Spanish Female' : 'UK English Female';

    // Función para leer el texto
    function readText() {
      if (typeof responsiveVoice !== 'undefined') {
        responsiveVoice.speak(text, voice, {
          pitch: 1,
          rate: 0.9,
          volume: 1
        });
      } else {
        console.error('ResponsiveVoice no está disponible');
      }
    }

    // Función para detener la lectura
    function stopReading() {
      if (typeof responsiveVoice !== 'undefined') {
        responsiveVoice.cancel();
      }
    }

    // Agregar eventos a los botones
    readButton.addEventListener('click', readText);
    stopButton.addEventListener('click', stopReading);

    // Detener la lectura al navegar a otra página
    window.addEventListener('beforeunload', stopReading);
    document.addEventListener('astro:before-swap', stopReading);
  });
</script>

<style>
  /* Estilos específicos para móviles */
  @media (max-width: 640px) {
    .text-to-speech button {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      touch-action: manipulation;
    }
  }
</style>
