---
import TwSizeIndicator from "@/components/core/TailwindSizeIndicator.astro";
import CookieConsent from "@/components/core/CookieConsent.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/layouts/partials/Footer.astro";
import Header from "@/layouts/partials/Header.astro";
import "@/styles/critical.scss";
import GoogleAnalytics from "@/components/GoogleAnalytics.astro";
import RequestDemoModal from "@/components/core/RequestDemoModal.astro";
import { RequestDemoFormIsland } from "@/components/react/ReactIslands";
import FloatingContactButton from "@/components/core/FloatingContactButton.astro";
import VideoTutorialModal from "@/components/core/VideoTutorialModal.astro";
import GlobalSearchModal from "@/components/search/GlobalSearchModal.astro";

import { AstroFont } from "astro-font";
import { ViewTransitions } from "astro:transitions";
import { getEntry } from "astro:content";
import type { PageType } from "@/content/page.types";
import type { ContentEntryMap } from "astro:content";
import { getLangFromUrl } from "@/i18n/utils";

const GTAG = import.meta.env.GTAG_ID

// font families
const pf = theme.fonts.font_family.primary;
const sf = theme.fonts.font_family.secondary;

let fontPrimary, fontSecondary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}
if (theme.fonts.font_family.secondary) {
  fontSecondary = theme.fonts.font_family.secondary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}

// types for frontmatters
export interface Props {
  /**
   * Entry keys to fetch data from content. The entry is expected to be a `PageType`
   * If an entry is not found, it will log a warning in the console.
   *
   * When found, the page data will be used to build the metadata for the page (SEO)
   *
   * @see PageType
   */
  entry_keys?: [keyof ContentEntryMap, string];
  /**
   * Override <title> og:title and twitter:title
   * @default config.site.title
   */
  title?: string;
  /**
   * Override meta description, og:description and twitter:description-
   * @default config.metadata.meta_description
   */
  description?: string;
  /**
   * Override meta keywords
   * @default config.metadata.meta_keywords
   */
  keywords?: string[];
  /**
   * Override the meta author
   * @default config.metadata.meta_author
   */
  author?: string;
  /**
   * Override og:image and twitter:image
   * @default config.metadata.meta_image
   */
  image?: string;
  noindex?: boolean;
  canonical_url?: string;
}

// distructure frontmatters
const {
  entry_keys,
  title,
  description,
  author,
  keywords,
  image,
  noindex,
  canonical_url,
} = Astro.props;

let page: PageType | undefined = undefined;

if (entry_keys) {
  const page_entry = await getEntry(...entry_keys);
  if (page_entry) {
    page = page_entry.data as PageType;
  }
}
const _title = title
  ? title
  : page?.document_title
    ? page.document_title
    : config.site.title;
const _description = description
  ? description
  : page?.meta_description
    ? page.meta_description
    : config.metadata.meta_description;
const _image = image
  ? image
  : page?.meta_image
    ? page.meta_image
    : config.metadata.meta_image;
const _author = author
  ? author
  : page?.meta_author
    ? page.meta_author
    : config.metadata.meta_author;
const _keywords = keywords
  ? keywords
  : page?.meta_keywords
    ? page.meta_keywords
    : config.metadata.meta_keywords;
const _canonical_url = canonical_url
  ? canonical_url
  : page?.canonical_url
    ? page.canonical_url
    : undefined;
const _noindex =
  noindex === true ? true : page?.noindex === true ? true : false;

// Obtener el código de idioma de la URL (sin el código de país)
const lang = getLangFromUrl(Astro.url);

// Para debug
console.log("Cargando layout Base.astro");
---

<!doctype html>
<html lang={lang}>
  <head>
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />

    <!-- Slot para etiquetas meta específicas de la página -->
    <slot name="head" />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- google font css -->
    <AstroFont
      config={[
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontPrimary!,
          fallback: "sans-serif",
          cssVariable: "font-primary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${pf}&display=swap`,
        },
        {
          src: [],
          preload: false,
          display: "swap",
          name: fontSecondary!,
          fallback: "sans-serif",
          cssVariable: "font-secondary",
          googleFontsURL: `https://fonts.googleapis.com/css2?family=${sf}&display=swap`,
        },
      ]}
    />

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- Google tag (gtag.js) - Optimizado para rendimiento -->
    <script defer define:vars={{GTAG}}>
      // Configuración inicial de Google Analytics
      window.GTAG_ID = GTAG;
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', window.GTAG_ID, {
        'send_page_view': false,
        'transport_type': 'beacon'
      }); // Retrasar el envío de la vista de página

      // Cargar el script de GA de forma diferida
      window.addEventListener('load', function() {
        // Retrasar la carga de GA para dar prioridad al renderizado
        setTimeout(function() {
          const script = document.createElement('script');
          script.src = "https://www.googletagmanager.com/gtag/js?id=" + GTAG;
          script.async = true;
          document.head.appendChild(script);

          // Enviar la vista de página después de que la página esté completamente cargada
          setTimeout(function() {
            gtag('event', 'page_view', {
              page_title: document.title,
              page_location: window.location.href,
              page_path: window.location.pathname
            });
          }, 2000);
        }, 1000);
      });
    </script>

    <!-- title -->
    <title>
      {plainify(_title)}
    </title>

    <!-- canonical url -->
    {
      _canonical_url && (
        <link rel="canonical" href={_canonical_url} item-prop="url" />
      )
    }

    <!-- Alternate language versions -->
    <link rel="alternate" hreflang="es" href={`${config.site.base_url}/es${Astro.url.pathname.replace(/^\/[a-z]{2}/, '')}`} />
    <link rel="alternate" hreflang="en" href={`${config.site.base_url}/en${Astro.url.pathname.replace(/^\/[a-z]{2}/, '')}`} />
    <link rel="alternate" hreflang="x-default" href={`${config.site.base_url}/es${Astro.url.pathname.replace(/^\/[a-z]{2}/, '')}`} />

    <!-- Preconexiones para recursos críticos -->
    <link rel="preconnect" href="https://www.googletagmanager.com" crossorigin />
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Precargar imágenes críticas con la máxima prioridad -->
    <link rel="preload" href="/images/webp/adaptada-a-moviles-tablets-y-pc.webp" as="image" type="image/webp" fetchpriority="high" importance="high" />

    <!-- Precargar la imagen principal con un script para asegurar la carga temprana -->
    <script is:inline>
      // Precargar la imagen principal de forma inmediata
      (function() {
        var img = new Image();
        img.src = '/images/webp/adaptada-a-moviles-tablets-y-pc.webp';
      })();
    </script>

    <!-- Estilos críticos inline para el renderizado inicial -->
    <style>
      /* Estilos básicos para el cuerpo y contenedores principales */
      body {
        margin: 0;
        padding: 0;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      }

      /* Estilos específicos para la imagen principal */
      img[src="/images/webp/adaptada-a-moviles-tablets-y-pc.webp"] {
        content-visibility: auto;
        contain-intrinsic-size: 500px 333px;
        width: 100%;
        height: auto;
        object-fit: contain;
        will-change: transform;
        transform: translateZ(0);
      }

      /* Placeholder para la imagen principal mientras se carga */
      .banner-image-container {
        position: relative;
        background-color: #f0f0f0;
        min-height: 333px;
        display: block;
      }

      /* Estilos básicos para el contenedor principal */
      main {
        display: block;
      }

      /* Estilos para la sección del banner */
      .section {
        padding: 1rem 0;
      }

      .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 1rem;
      }
    </style>

    <!-- RSS Feeds -->
    <link rel="alternate" type="application/rss+xml" title={`${config.site.title} - RSS Feed`} href={`${config.site.base_url}/rss.xml`} />
    <link rel="alternate" type="application/rss+xml" title={`${config.site.title} - RSS Feed (Español)`} href={`${config.site.base_url}/es/rss.xml`} />
    <link rel="alternate" type="application/rss+xml" title={`${config.site.title} - RSS Feed (English)`} href={`${config.site.base_url}/en/rss.xml`} />

    <!-- noindex robots -->
    {
      _noindex === true ? (
        <meta name="robots" content="noindex, nofollow" />
      ) : (
        <meta name="robots" content="index, follow" />
      )
    }

    <!-- meta-description -->
    <meta name="description" content={plainify(_description)} />

    <ViewTransitions />

    <!-- author from config.json -->
    <meta name="author" content={plainify(_author)} />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={plainify(_title)} />
    <meta property="og:description" content={plainify(_description)} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={`${config.site.base_url}${Astro.url.pathname}`} />
    <meta property="og:site_name" content={config.site.title} />
    <meta property="og:locale" content={lang === 'es' ? 'es_ES' : 'en_US'} />
    <meta property="og:locale:alternate" content={lang === 'es' ? 'en_US' : 'es_ES'} />
    <meta property="og:image" content={`${config.site.base_url}${_image}`} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={plainify(_title)} />

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={plainify(_title)} />
    <meta name="twitter:description" content={plainify(_description)} />
    <meta name="twitter:image" content={`${config.site.base_url}${_image}`} />
    <meta name="twitter:image:alt" content={plainify(_title)} />
    <meta name="twitter:site" content="@cronometras" />

    <!-- LinkedIn specific - usando propiedades estándar de Open Graph que LinkedIn reconoce -->
    <!-- LinkedIn usa las etiquetas Open Graph estándar, pero asegurémonos de que estén completas -->
    <meta property="og:type" content="article" />
    <meta property="og:site_name" content="Cronometras" />
    <meta property="og:locale" content={lang === 'es' ? "es_ES" : "en_US"} />
    <meta property="article:published_time" content={new Date().toISOString()} />
    <meta property="article:author" content={plainify(_author)} />
    <meta property="article:section" content="Technology" />
    <meta property="article:tag" content={Array.isArray(_keywords) ? _keywords.join(',') : "cronometraje industrial"} />

    <!-- Etiquetas específicas para LinkedIn -->
    <meta name="linkedin:owner" content="Cronometras" />
    <meta name="linkedin:card" content="summary_large_image" />
    <script is:inline>
      // Configuración del tema
      const setTheme = () => {
        const theme = (() => {
          if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
          ) {
            return localStorage.getItem("theme");
          }
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
          }
          return "light";
        })();

        if (theme === "light") {
          document.documentElement.classList.remove("dark");
        } else {
          document.documentElement.classList.add("dark");
        }

        window.localStorage.setItem("theme", theme || "light");
      };

      setTheme();

      document.addEventListener("astro:after-swap", setTheme);
    </script>
  </head>
  <body class="bg-background text-text">
    <div class="animate-fade-in">
      <TwSizeIndicator />
      <Header />
      <main id="main-content">
        <slot />
      </main>
      <Footer />
    </div>
    <CookieConsent />
    <GoogleAnalytics />
    <RequestDemoModal />

    <!-- Formulario de solicitud de demo - Se cargará mediante React en el cliente -->
    <RequestDemoFormIsland targetId="form-container" client:load />

    <!-- Script para depuración e inicialización global - Optimizado para rendimiento -->
    <script defer>
      // Función para inicializar modales
      function initializeModals() {
        // Check if we need to open a modal based on URL hash
        if (window.location.hash) {
          const hash = window.location.hash.toLowerCase();

          if (hash === '#video') {
            if (typeof window.openVideoTutorialModal === 'function') {
              window.openVideoTutorialModal();
            } else {
              // Intentar de nuevo después de un tiempo
              setTimeout(function() {
                if (typeof window.openVideoTutorialModal === 'function') {
                  window.openVideoTutorialModal();
                }
              }, 1000);
            }
          } else if (hash === '#demo') {
            if (typeof window.openRequestDemoModal === 'function') {
              window.openRequestDemoModal();
            } else {
              // Intentar de nuevo después de un tiempo
              setTimeout(function() {
                if (typeof window.openRequestDemoModal === 'function') {
                  window.openRequestDemoModal();
                }
              }, 1000);
            }
          }
        }
      }

      // Esperar a que la página esté completamente cargada
      window.addEventListener('load', function() {
        // Retrasar la inicialización para dar prioridad al renderizado
        setTimeout(function() {
          window.initializeModals = initializeModals;
          initializeModals();
        }, 500);
      });

      // Manejar cambios en el hash de la URL
      window.addEventListener('hashchange', function() {
        if (typeof window.initializeModals === 'function') {
          window.initializeModals();
        }
      });
    </script>

    <FloatingContactButton />
    <VideoTutorialModal />
    <GlobalSearchModal />
  </body>
</html>
