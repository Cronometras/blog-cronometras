---
interface Props {
  text: string;
  lang: string;
}

const { text, lang } = Astro.props;

// Textos según el idioma
const readText = lang === 'es' ? 'Leer en voz alta' : 'Read aloud';
const pauseText = lang === 'es' ? 'Pausar' : 'Pause';
const resumeText = lang === 'es' ? 'Continuar' : 'Resume';
const stopText = lang === 'es' ? 'Detener' : 'Stop';
const errorText = lang === 'es' ? 'Error: Toca para reintentar' : 'Error: Tap to retry';

// Limitar longitud del texto para evitar problemas
const maxLength = 5000;
const plainText = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
---

<div class="mobile-voice-reader flex flex-wrap gap-2 items-center">
  <button
    id="read-button"
    class="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors duration-200"
    aria-label={readText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243a1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828a1 1 0 010-1.415z" clip-rule="evenodd" />
    </svg>
    <span id="button-text">{readText}</span>
  </button>
  
  <button
    id="stop-button"
    class="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 opacity-50 cursor-not-allowed"
    disabled
    aria-label={stopText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
    </svg>
    <span>{stopText}</span>
  </button>
</div>

<!-- Contenedor oculto para el texto -->
<div id="article-text" class="hidden" aria-hidden="true">{plainText}</div>

<script define:vars={{ lang, readText, pauseText, resumeText, stopText, errorText }}>
// Estados del reproductor
const STATES = {
  STOPPED: 'stopped',
  PLAYING: 'playing',
  PAUSED: 'paused',
  ERROR: 'error'
};

// Clase para manejar la síntesis de voz
class MobileVoiceReader {
  constructor() {
    this.state = STATES.STOPPED;
    this.readButton = document.getElementById('read-button');
    this.buttonText = document.getElementById('button-text');
    this.stopButton = document.getElementById('stop-button');
    this.articleText = document.getElementById('article-text');
    
    this.text = this.articleText ? this.articleText.textContent || '' : '';
    this.lang = lang || 'en';
    this.utterance = null;
    this.currentIndex = 0;
    this.chunks = [];
    this.currentChunk = 0;
    
    // Detectar tipo de dispositivo y navegador
    this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.isAndroid = /Android/i.test(navigator.userAgent);
    this.isChrome = /Chrome/i.test(navigator.userAgent);
    this.isSafari = /Safari/i.test(navigator.userAgent) && !/Chrome/i.test(navigator.userAgent);
    this.isEdge = /Edg/i.test(navigator.userAgent);
    
    // Verificar soporte de síntesis de voz
    this.speechSynthesisSupported = 'speechSynthesis' in window;
    
    this.init();
  }
  
  init() {
    if (!this.readButton || !this.stopButton || !this.text) return;
    
    // Dividir el texto en fragmentos más pequeños para mejor compatibilidad
    this.prepareTextChunks();
    
    // Inicializar eventos
    this.readButton.addEventListener('click', () => this.toggleReading());
    this.stopButton.addEventListener('click', () => this.stopReading());
    
    // Inicializar síntesis de voz
    if (this.speechSynthesisSupported) {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();
      
      // Inicializar voces
      if (window.speechSynthesis.getVoices().length === 0) {
        window.speechSynthesis.onvoiceschanged = () => {
          console.log('Voces cargadas:', window.speechSynthesis.getVoices().length);
        };
      }
      
      // Fix para Safari en iOS
      if (this.isIOS) {
        document.addEventListener('touchstart', () => {
          window.speechSynthesis.cancel();
        }, { once: true });
      }
    } else {
      this.updateState(STATES.ERROR);
    }
    
    // Limpiar al navegar a otra página
    window.addEventListener('beforeunload', () => this.stopReading());
    document.addEventListener('astro:before-swap', () => this.stopReading());
    
    console.log('MobileVoiceReader inicializado:', {
      isMobile: this.isMobile,
      isIOS: this.isIOS,
      isAndroid: this.isAndroid,
      isChrome: this.isChrome,
      isSafari: this.isSafari,
      isEdge: this.isEdge,
      speechSupported: this.speechSynthesisSupported,
      textLength: this.text.length,
      chunks: this.chunks.length
    });
  }
  
  // Dividir el texto en fragmentos más pequeños
  prepareTextChunks() {
    // Tamaño máximo de cada fragmento (más pequeño para dispositivos móviles)
    const chunkSize = this.isMobile ? 200 : 500;
    
    // Dividir por oraciones o párrafos
    const sentences = this.text.match(/[^.!?]+[.!?]+/g) || [];
    
    if (sentences.length === 0) {
      // Si no hay oraciones, dividir por longitud
      for (let i = 0; i < this.text.length; i += chunkSize) {
        this.chunks.push(this.text.substring(i, i + chunkSize));
      }
    } else {
      // Agrupar oraciones en fragmentos
      let currentChunk = '';
      for (const sentence of sentences) {
        if (currentChunk.length + sentence.length > chunkSize) {
          this.chunks.push(currentChunk);
          currentChunk = sentence;
        } else {
          currentChunk += sentence;
        }
      }
      if (currentChunk) {
        this.chunks.push(currentChunk);
      }
    }
    
    // Si no hay fragmentos, crear uno con el texto completo
    if (this.chunks.length === 0) {
      this.chunks.push(this.text);
    }
  }
  
  // Alternar entre reproducir y pausar
  toggleReading() {
    switch (this.state) {
      case STATES.STOPPED:
      case STATES.ERROR:
        this.startReading();
        break;
      case STATES.PLAYING:
        this.pauseReading();
        break;
      case STATES.PAUSED:
        this.resumeReading();
        break;
    }
  }
  
  // Iniciar la lectura
  startReading() {
    if (!this.speechSynthesisSupported) {
      this.updateState(STATES.ERROR);
      return;
    }
    
    try {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();
      
      // Reiniciar el índice de fragmentos
      this.currentChunk = 0;
      
      // Iniciar la lectura del primer fragmento
      this.speakCurrentChunk();
    } catch (error) {
      console.error('Error al iniciar la lectura:', error);
      this.updateState(STATES.ERROR);
    }
  }
  
  // Reproducir el fragmento actual
  speakCurrentChunk() {
    if (this.currentChunk >= this.chunks.length) {
      // Hemos terminado todos los fragmentos
      this.updateState(STATES.STOPPED);
      return;
    }
    
    try {
      const chunkText = this.chunks[this.currentChunk];
      
      // Crear una nueva instancia de SpeechSynthesisUtterance
      this.utterance = new SpeechSynthesisUtterance(chunkText);
      this.utterance.lang = this.lang === 'es' ? 'es-ES' : 'en-US';
      this.utterance.rate = 0.9; // Ligeramente más lento para mejor comprensión
      
      // Seleccionar una voz adecuada
      const voices = window.speechSynthesis.getVoices();
      const langCode = this.lang === 'es' ? 'es' : 'en';
      
      // Buscar una voz adecuada
      let voice = voices.find(v => v.lang.startsWith(langCode) && v.localService);
      if (!voice) {
        voice = voices.find(v => v.lang.startsWith(langCode));
      }
      
      if (voice) {
        this.utterance.voice = voice;
      }
      
      // Configurar eventos
      this.utterance.onstart = () => {
        this.updateState(STATES.PLAYING);
      };
      
      this.utterance.onend = () => {
        // Pasar al siguiente fragmento
        this.currentChunk++;
        
        // Si hay más fragmentos, continuar
        if (this.currentChunk < this.chunks.length) {
          // Pequeña pausa entre fragmentos
          setTimeout(() => {
            this.speakCurrentChunk();
          }, 250);
        } else {
          // Hemos terminado todos los fragmentos
          this.updateState(STATES.STOPPED);
        }
      };
      
      this.utterance.onerror = (event) => {
        console.error('Error en la síntesis de voz:', event);
        
        // Si es un error de interrupción, intentar con el siguiente fragmento
        if (event.error === 'interrupted' || event.error === 'canceled') {
          this.currentChunk++;
          if (this.currentChunk < this.chunks.length) {
            setTimeout(() => {
              this.speakCurrentChunk();
            }, 500);
          } else {
            this.updateState(STATES.STOPPED);
          }
        } else {
          this.updateState(STATES.ERROR);
        }
      };
      
      // Iniciar la reproducción
      window.speechSynthesis.speak(this.utterance);
      this.updateState(STATES.PLAYING);
      
      // Fix para Chrome en Android
      if (this.isAndroid && this.isChrome) {
        this.startChromeWorkaround();
      }
    } catch (error) {
      console.error('Error al reproducir fragmento:', error);
      this.updateState(STATES.ERROR);
    }
  }
  
  // Solución para el bug de Chrome en Android
  startChromeWorkaround() {
    if (this.chromeWorkaroundInterval) {
      clearInterval(this.chromeWorkaroundInterval);
    }
    
    this.chromeWorkaroundInterval = setInterval(() => {
      if (this.state === STATES.PLAYING) {
        window.speechSynthesis.pause();
        window.speechSynthesis.resume();
      } else {
        clearInterval(this.chromeWorkaroundInterval);
      }
    }, 5000);
  }
  
  // Pausar la lectura
  pauseReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      window.speechSynthesis.pause();
      this.updateState(STATES.PAUSED);
      
      // Limpiar el workaround de Chrome si está activo
      if (this.chromeWorkaroundInterval) {
        clearInterval(this.chromeWorkaroundInterval);
      }
    } catch (error) {
      console.error('Error al pausar la lectura:', error);
      this.stopReading(); // Si falla la pausa, detener completamente
    }
  }
  
  // Reanudar la lectura
  resumeReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      window.speechSynthesis.resume();
      this.updateState(STATES.PLAYING);
      
      // Reiniciar el workaround de Chrome si es necesario
      if (this.isAndroid && this.isChrome) {
        this.startChromeWorkaround();
      }
    } catch (error) {
      console.error('Error al reanudar la lectura:', error);
      this.stopReading(); // Si falla la reanudación, detener completamente
    }
  }
  
  // Detener la lectura
  stopReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      window.speechSynthesis.cancel();
      this.updateState(STATES.STOPPED);
      
      // Limpiar el workaround de Chrome si está activo
      if (this.chromeWorkaroundInterval) {
        clearInterval(this.chromeWorkaroundInterval);
      }
    } catch (error) {
      console.error('Error al detener la lectura:', error);
    }
  }
  
  // Actualizar el estado y la interfaz
  updateState(newState) {
    this.state = newState;
    
    // Actualizar la interfaz según el estado
    if (this.readButton && this.buttonText && this.stopButton) {
      switch (newState) {
        case STATES.PLAYING:
          this.buttonText.textContent = pauseText;
          this.readButton.classList.remove('bg-primary', 'hover:bg-primary/90', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-yellow-600', 'hover:bg-yellow-700');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.PAUSED:
          this.buttonText.textContent = resumeText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.STOPPED:
          this.buttonText.textContent = readText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.ERROR:
          this.buttonText.textContent = errorText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-primary', 'hover:bg-primary/90');
          this.readButton.classList.add('bg-red-600', 'hover:bg-red-700');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');
          break;
      }
    }
  }
}

// Inicializar cuando el DOM esté cargado
document.addEventListener('DOMContentLoaded', () => {
  new MobileVoiceReader();
});
</script>

<style>
  /* Estilos específicos para móviles */
  @media (max-width: 640px) {
    .mobile-voice-reader button {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      touch-action: manipulation;
    }
  }
</style>
