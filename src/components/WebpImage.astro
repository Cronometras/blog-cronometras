---
// WebpImage.astro - Un componente para usar imágenes WebP con fallback
const { src, alt, width, height, class: className, critical = false } = Astro.props;

// Verificar si es la imagen principal del banner
const isMainBannerImage = src === "/images/webp/adaptada-a-moviles-tablets-y-pc.webp";

// Verificar si la ruta de la imagen comienza con /images/
const isLocalImage = src.startsWith('/images/');

// Crear la ruta de la imagen WebP
let webpSrc = src;
if (isLocalImage) {
  // Verificar si la imagen ya es WebP
  if (src.endsWith('.webp')) {
    webpSrc = src;
  } else {
    // Si no es WebP, convertir la ruta
    const basePath = src.substring(0, src.lastIndexOf('/') + 1);
    const fileName = src.substring(src.lastIndexOf('/') + 1);
    const fileNameWithoutExt = fileName.substring(0, fileName.lastIndexOf('.'));
    const slugifiedFileName = fileNameWithoutExt
      .toLowerCase()
      .replace(/[áàäâãå]/g, 'a')
      .replace(/[éèëê]/g, 'e')
      .replace(/[íìïî]/g, 'i')
      .replace(/[óòöôõ]/g, 'o')
      .replace(/[úùüû]/g, 'u')
      .replace(/[ñ]/g, 'n')
      .replace(/[ç]/g, 'c')
      .replace(/[^a-z0-9.]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
    webpSrc = `${basePath}webp/${slugifiedFileName}.webp`;
  }
}
---

<picture class={isMainBannerImage ? 'banner-image-container' : ''}>
  <source srcset={webpSrc} type="image/webp">
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={critical || isMainBannerImage ? "eager" : "lazy"}
    fetchpriority={critical || isMainBannerImage ? "high" : "auto"}
    decoding="async"
  />
</picture>

<style>
  img {
    max-width: 100%;
    height: auto;
  }
</style>
