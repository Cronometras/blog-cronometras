---
import PageHeader from "@/components/core/PageHeader.astro";
import Base from "@/layouts/Base.astro";
import { getCollection } from "astro:content";

// Debug logging
console.log("üîç DEBUG: Starting privacy page rendering process");

// Get all privacy entries
const allPrivacyEntries = await getCollection("privacy");
console.log("üîç DEBUG: All privacy entries:", allPrivacyEntries.map(entry => entry.id));

// Find the Spanish privacy entry
const privacyEntry = allPrivacyEntries.find(entry => entry.id === "es/index");
console.log("üîç DEBUG: Found privacy entry?", !!privacyEntry);

let page_data;
let Content;

if (privacyEntry) {
  console.log("‚úÖ DEBUG: Successfully found privacy entry", {
    id: privacyEntry.id,
    collection: privacyEntry.collection,
    dataKeys: Object.keys(privacyEntry.data),
    bodyLength: privacyEntry.body.length
  });
  
  page_data = {
    ...privacyEntry.data,
    content: privacyEntry.body,
  };
  
  try {
    console.log("üîç DEBUG: Attempting to render privacy content");
    const { Content: RenderedContent } = await privacyEntry.render();
    Content = RenderedContent;
    console.log("‚úÖ DEBUG: Successfully rendered privacy content");
  } catch (renderError) {
    console.error("‚ùå DEBUG: Error rendering privacy content", renderError);
  }
} else {
  console.error("‚ùå DEBUG: Privacy entry not found for language: es");
  // Provide fallback data
  page_data = {
    title: 'Pol√≠tica de Privacidad',
    description: 'Informaci√≥n sobre nuestra pol√≠tica de privacidad.',
    content: ''
  };
}

// Read the raw content directly as a fallback
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const contentPath = path.resolve(__dirname, '../../../content/privacy/es/index.md');

let rawContent = '';
try {
  if (fs.existsSync(contentPath)) {
    rawContent = fs.readFileSync(contentPath, 'utf-8');
    console.log("‚úÖ DEBUG: Successfully read raw content file", {
      path: contentPath,
      contentLength: rawContent.length
    });
    
    // Remove frontmatter
    rawContent = rawContent.replace(/^---[\s\S]*?---/, '').trim();
  } else {
    console.error("‚ùå DEBUG: Raw content file not found at path:", contentPath);
  }
} catch (fsError) {
  console.error("‚ùå DEBUG: Error reading raw content file", fsError);
}
---

<Base
  entry_keys={["privacy", "es/index"]}
>
  <section class="py-16">
    <div class="container">
      <div class="mx-auto max-w-[768px] text-center">
        <PageHeader page_data={page_data} />
      </div>
      <div class="container py-10">
        <div class="row justify-center">
          <div class="md:col-10 lg:col-8">
            <div class="prose prose-lg mx-auto">
              {Content ? (
                <Content />
              ) : rawContent ? (
                <div set:html={rawContent} />
              ) : (
                <p class="mb-6">{page_data.description}</p>
              )}
              
              <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mt-6">
                <h3 class="font-bold">Debug Information:</h3>
                <p>Content Component Available: {Content ? "Yes" : "No"}</p>
                <p>Raw Content Available: {rawContent ? "Yes" : "No"}</p>
                <p>Raw Content Length: {rawContent.length}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
</Base>
