---
import { getCollection } from 'astro:content';
import Base from '@/layouts/Base.astro';
import BlogListSchema from '@/components/blog/BlogListSchema.astro';
import Pagination from '@/components/Pagination.astro';
import CategoryFilter from '@/components/CategoryFilter.astro';
import { slugify } from '@/utils/slugify';
import { getAllCategories, denormalizeCategoryName } from '@/utils/categories';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const postsPerPage = 30; // Mostrar 30 entradas por página
  const languages = ['es', 'en'];
  const paths = [];

  for (const lang of languages) {
    // Obtener todas las categorías para este idioma
    const categories = await getAllCategories(lang);
    
    // Para cada categoría, crear rutas de paginación
    for (const category of categories) {
      // Normalizar el nombre de la categoría para la URL
      const normalizedCategory = category.toLowerCase().replace(/ /g, '-');
      
      // Filtrar posts por idioma, categoría y que no sean borradores
      const filteredPosts = allPosts.filter((post) => {
        const postLang = post.slug.split('/')[0];
        const postCategory = post.data.category;
        return postLang === lang && 
               !post.data.draft && 
               postCategory && 
               postCategory.toLowerCase().replace(/ /g, '-') === normalizedCategory;
      });
      
      // Ordenar por fecha de publicación, más reciente primero
      const sortedPosts = filteredPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
      
      // Calcular el número total de páginas
      const totalPages = Math.ceil(sortedPosts.length / postsPerPage);
      
      // Generar rutas para cada página (excepto la primera que ya está en index.astro)
      for (let page = 2; page <= totalPages; page++) {
        const startIndex = (page - 1) * postsPerPage;
        const endIndex = startIndex + postsPerPage;
        
        paths.push({
          params: { lang, category: normalizedCategory, page: page.toString() },
          props: {
            posts: sortedPosts.slice(startIndex, endIndex),
            currentPage: page,
            totalPages,
            totalPosts: sortedPosts.length,
            categories,
            currentCategory: normalizedCategory,
            categoryName: category
          }
        });
      }
    }
  }

  return paths;
}

// Habilitar prerender para generar páginas estáticas durante la compilación
export const prerender = true;

const { lang, category, page } = Astro.params;
const { posts, currentPage, totalPages, totalPosts, categories, currentCategory, categoryName } = Astro.props;

console.log(`Renderizando página ${currentPage} de blog para idioma: ${lang}, categoría: ${category}`);
console.log(`Total posts: ${totalPosts}, Mostrando: ${posts.length}, Páginas totales: ${totalPages}`);

// Traducir el título y descripción según el idioma
const title = lang === 'es' 
  ? `Blog de CRONOMETRAS - Categoría: ${categoryName} - Página ${currentPage}` 
  : `CRONOMETRAS Blog - Category: ${categoryName} - Page ${currentPage}`;

const description = lang === 'es'
  ? `Artículos sobre ${categoryName.toLowerCase()}`
  : `Articles about ${categoryName.toLowerCase()}`;

// Traducir el texto del botón "Leer más"
const readMoreText = lang === 'es' ? 'Leer más' : 'Read more';
---

<Base title={title} description={description}>
  <BlogListSchema posts={posts} url={Astro.url} title={title} description={description} />
  <section class="py-20">
    <div class="container">
      <div class="row justify-center">
        <div class="col-12 text-center">
          <h1 class="mb-4 text-4xl lg:text-5xl font-bold">
            {lang === 'es' ? 'Blog de CRONOMETRAS' : 'CRONOMETRAS Blog'}
          </h1>
          <p class="mb-2 text-lg">{description}</p>
          <p class="mb-2 text-accent font-medium">
            {lang === 'es' ? `Categoría: ${categoryName}` : `Category: ${categoryName}`}
          </p>
          <p class="mb-8 text-gray-600 dark:text-gray-300">
            {lang === 'es' ? `Página ${currentPage} de ${totalPages}` : `Page ${currentPage} of ${totalPages}`}
          </p>
          
          {/* Filtro de categorías */}
          <div class="max-w-3xl mx-auto">
            <CategoryFilter
              categories={categories}
              currentCategory={currentCategory}
              lang={lang}
            />
          </div>
        </div>
      </div>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {
          posts.map((post) => {
            // Extraer el slug correcto, omitiendo la parte del idioma
            const postSlug = post.slug.split('/').slice(1).join('/');
            console.log(`Generando card para post: ${post.id}, slug: ${postSlug}`);

            return (
              <div class="rounded-lg shadow-lg overflow-hidden bg-white dark:bg-gray-800 transition-transform duration-300 hover:-translate-y-2">
                <a href={`/${lang}/blog/${postSlug}`} class="block">
                  <img
                    src={post.data.heroImage || '/images/cronometras App.png'}
                    alt={post.data.title}
                    class="w-full h-48 object-cover"
                  />
                  <div class="p-6">
                    <p class="text-sm text-accent mb-2 font-medium">
                      {post.data.category}
                    </p>
                    <h2 class="text-xl font-bold mb-3 text-gray-900 dark:text-white">
                      {post.data.title}
                    </h2>
                    <p class="text-gray-600 dark:text-gray-300 mb-4">
                      {post.data.description}
                    </p>
                    <div class="flex justify-between items-center">
                      <span class="text-sm text-gray-500 dark:text-gray-400">
                        {post.data.pubDate.toLocaleDateString(lang === 'es' ? 'es-ES' : 'en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                        })}
                      </span>
                      <span class="text-accent font-medium">{readMoreText} &rarr;</span>
                    </div>
                  </div>
                </a>
              </div>
            );
          })
        }
      </div>

      {posts.length === 0 && (
        <div class="text-center py-20">
          <p class="text-xl text-gray-600 dark:text-gray-300">
            {lang === 'es' 
              ? `No hay artículos disponibles en la categoría "${categoryName}".` 
              : `No articles available in the "${categoryName}" category.`}
          </p>
        </div>
      )}
      
      {/* Paginación */}
      <Pagination 
        currentPage={currentPage} 
        totalPages={totalPages} 
        basePath={`/${lang}/blog/category/${category}`} 
        lang={lang} 
      />
    </div>
  </section>
</Base>

<style>
  .section {
    min-height: calc(100vh - 200px);
  }
</style>
