---
interface Props {
  text: string;
  lang: string;
}

const { text, lang } = Astro.props;

// Textos según el idioma
const readText = lang === 'es' ? 'Leer en voz alta' : 'Read aloud';
const pauseText = lang === 'es' ? 'Pausar' : 'Pause';
const resumeText = lang === 'es' ? 'Continuar' : 'Resume';
const stopText = lang === 'es' ? 'Detener' : 'Stop';
const errorText = lang === 'es' ? 'Error: Toca para reintentar' : 'Error: Tap to retry';

// Limitar longitud del texto para evitar problemas
const maxLength = 5000;
const plainText = text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
---

<div class="natural-reader flex flex-wrap gap-2 items-center">
  <button
    id="read-button"
    class="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors duration-200"
    aria-label={readText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071a1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243a1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828a1 1 0 010-1.415z" clip-rule="evenodd" />
    </svg>
    <span id="button-text">{readText}</span>
  </button>
  
  <button
    id="stop-button"
    class="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 opacity-50 cursor-not-allowed"
    disabled
    aria-label={stopText}
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z" clip-rule="evenodd" />
    </svg>
    <span>{stopText}</span>
  </button>
  
  <!-- Controles adicionales -->
  <div id="reader-controls" class="hidden w-full mt-2 flex flex-wrap gap-2 items-center">
    <!-- Control de velocidad -->
    <div class="flex items-center gap-2">
      <label for="speed-control" class="text-sm text-gray-600 dark:text-gray-400">
        {lang === 'es' ? 'Velocidad:' : 'Speed:'}
      </label>
      <select 
        id="speed-control" 
        class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded px-2 py-1 text-sm"
      >
        <option value="0.7">{lang === 'es' ? 'Lenta' : 'Slow'}</option>
        <option value="0.9" selected>{lang === 'es' ? 'Normal' : 'Normal'}</option>
        <option value="1.1">{lang === 'es' ? 'Rápida' : 'Fast'}</option>
        <option value="1.3">{lang === 'es' ? 'Muy rápida' : 'Very fast'}</option>
      </select>
    </div>
    
    <!-- Indicador de progreso -->
    <div id="progress-container" class="flex-grow h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
      <div id="progress-bar" class="h-full bg-primary rounded-full" style="width: 0%"></div>
    </div>
  </div>
</div>

<!-- Contenedor oculto para el texto -->
<div id="article-text" class="hidden" aria-hidden="true">{plainText}</div>

<script define:vars={{ lang, readText, pauseText, resumeText, stopText, errorText }}>
// Estados del reproductor
const STATES = {
  STOPPED: 'stopped',
  PLAYING: 'playing',
  PAUSED: 'paused',
  ERROR: 'error'
};

// Clase para manejar la síntesis de voz con un enfoque de fragmentos naturales
class NaturalReader {
  constructor() {
    this.state = STATES.STOPPED;
    this.readButton = document.getElementById('read-button');
    this.buttonText = document.getElementById('button-text');
    this.stopButton = document.getElementById('stop-button');
    this.articleText = document.getElementById('article-text');
    this.readerControls = document.getElementById('reader-controls');
    this.progressContainer = document.getElementById('progress-container');
    this.progressBar = document.getElementById('progress-bar');
    this.speedControl = document.getElementById('speed-control');
    
    this.text = this.articleText ? this.articleText.textContent || '' : '';
    this.lang = lang || 'en';
    this.utterance = null;
    this.chunks = [];
    this.currentChunk = 0;
    this.totalChunks = 0;
    this.shouldContinue = false;
    this.speechRate = 0.9; // Velocidad predeterminada
    
    // Detectar tipo de dispositivo y navegador
    this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.isAndroid = /Android/i.test(navigator.userAgent);
    this.isChrome = /Chrome/i.test(navigator.userAgent);
    this.isSafari = /Safari/i.test(navigator.userAgent) && !/Chrome/i.test(navigator.userAgent);
    this.isEdge = /Edg/i.test(navigator.userAgent);
    
    // Verificar soporte de síntesis de voz
    this.speechSynthesisSupported = 'speechSynthesis' in window;
    
    this.init();
  }
  
  init() {
    if (!this.readButton || !this.stopButton || !this.text) return;
    
    // Limpiar y dividir el texto en fragmentos naturales
    this.prepareTextChunks();
    
    // Inicializar eventos
    this.readButton.addEventListener('click', () => this.toggleReading());
    this.stopButton.addEventListener('click', () => this.stopReading());
    
    // Evento para el control de velocidad
    if (this.speedControl) {
      this.speedControl.addEventListener('change', () => {
        this.speechRate = parseFloat(this.speedControl.value) || 0.9;
        console.log(`Velocidad de lectura cambiada a: ${this.speechRate}`);
      });
    }
    
    // Inicializar síntesis de voz
    if (this.speechSynthesisSupported) {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();
      
      // Fix para Safari en iOS
      if (this.isIOS) {
        document.addEventListener('touchstart', () => {
          window.speechSynthesis.cancel();
        }, { once: true });
      }
    } else {
      this.updateState(STATES.ERROR);
    }
    
    // Limpiar al navegar a otra página
    window.addEventListener('beforeunload', () => this.stopReading());
    document.addEventListener('astro:before-swap', () => this.stopReading());
    
    console.log('NaturalReader inicializado:', {
      isMobile: this.isMobile,
      isIOS: this.isIOS,
      isAndroid: this.isAndroid,
      isChrome: this.isChrome,
      isSafari: this.isSafari,
      isEdge: this.isEdge,
      speechSupported: this.speechSynthesisSupported,
      textLength: this.text.length,
      chunks: this.chunks.length
    });
  }
  
  // Dividir el texto en fragmentos para una lectura más natural
  prepareTextChunks() {
    // Primero, limpiar el texto de caracteres especiales y HTML
    const cleanText = this.text
      .replace(/<[^>]*>/g, '') // Eliminar etiquetas HTML
      .replace(/\\s+/g, ' ')   // Normalizar espacios
      .trim();
    
    // Tamaño de fragmento optimizado para una lectura natural
    // pero lo suficientemente pequeño para evitar problemas en móviles
    const chunkSize = this.isMobile ? 150 : 300;
    
    // Dividir por párrafos primero para respetar la estructura del texto
    const paragraphs = cleanText.split(/\\n+/);
    
    if (paragraphs.length <= 1) {
      // Si no hay párrafos claros, dividir por oraciones
      const sentences = cleanText.match(/[^.!?]+[.!?]+/g) || [];
      
      if (sentences.length === 0) {
        // Si no hay oraciones, dividir por longitud
        for (let i = 0; i < cleanText.length; i += chunkSize) {
          this.chunks.push(cleanText.substring(i, i + chunkSize));
        }
      } else {
        // Agrupar oraciones en fragmentos más grandes para una lectura más natural
        let currentChunk = '';
        
        for (const sentence of sentences) {
          // Si añadir esta oración excedería el tamaño máximo, guardar el fragmento actual
          if (currentChunk.length + sentence.length > chunkSize && currentChunk.length > 0) {
            this.chunks.push(currentChunk);
            currentChunk = sentence;
          } else {
            currentChunk += sentence;
          }
        }
        
        // Añadir el último fragmento si queda algo
        if (currentChunk.length > 0) {
          this.chunks.push(currentChunk);
        }
      }
    } else {
      // Procesar cada párrafo
      for (const paragraph of paragraphs) {
        if (paragraph.trim().length === 0) continue;
        
        // Si el párrafo es más corto que el tamaño máximo, usarlo como un fragmento
        if (paragraph.length <= chunkSize) {
          this.chunks.push(paragraph);
        } else {
          // Dividir párrafos largos por oraciones
          const sentences = paragraph.match(/[^.!?]+[.!?]+/g) || [paragraph];
          let currentChunk = '';
          
          for (const sentence of sentences) {
            // Si añadir esta oración excedería el tamaño máximo, guardar el fragmento actual
            if (currentChunk.length + sentence.length > chunkSize && currentChunk.length > 0) {
              this.chunks.push(currentChunk);
              currentChunk = sentence;
            } else {
              currentChunk += sentence;
            }
          }
          
          // Añadir el último fragmento si queda algo
          if (currentChunk.length > 0) {
            this.chunks.push(currentChunk);
          }
        }
      }
    }
    
    // Si no hay fragmentos, crear uno con el texto limpio
    if (this.chunks.length === 0) {
      this.chunks.push(cleanText.substring(0, 1000)); // Limitar a 1000 caracteres como máximo
    }
    
    // Limitar el número total de fragmentos para evitar problemas
    if (this.chunks.length > 100) {
      this.chunks = this.chunks.slice(0, 100);
    }
    
    this.totalChunks = this.chunks.length;
    console.log(`Texto dividido en ${this.chunks.length} fragmentos para lectura natural`);
  }
  
  // Alternar entre reproducir y pausar
  toggleReading() {
    switch (this.state) {
      case STATES.STOPPED:
      case STATES.ERROR:
        this.startReading();
        break;
      case STATES.PLAYING:
        this.pauseReading();
        break;
      case STATES.PAUSED:
        this.resumeReading();
        break;
    }
  }
  
  // Iniciar la lectura
  startReading() {
    if (!this.speechSynthesisSupported) {
      this.updateState(STATES.ERROR);
      return;
    }
    
    try {
      // Cancelar cualquier síntesis en curso
      window.speechSynthesis.cancel();
      
      // Reiniciar el índice de fragmentos
      this.currentChunk = 0;
      this.shouldContinue = true;
      
      // Mostrar los controles adicionales
      if (this.readerControls) {
        this.readerControls.classList.remove('hidden');
      }
      
      // Iniciar la lectura del primer fragmento
      this.updateState(STATES.PLAYING);
      this.speakNextChunk();
    } catch (error) {
      console.error('Error al iniciar la lectura:', error);
      this.updateState(STATES.ERROR);
    }
  }
  
  // Reproducir el siguiente fragmento
  speakNextChunk() {
    if (!this.shouldContinue || this.currentChunk >= this.chunks.length) {
      // Hemos terminado todos los fragmentos o se ha detenido la lectura
      this.updateState(STATES.STOPPED);
      return;
    }
    
    try {
      const chunkText = this.chunks[this.currentChunk];
      
      // Actualizar la barra de progreso
      this.updateProgressBar();
      
      // Crear una nueva instancia de SpeechSynthesisUtterance
      this.utterance = new SpeechSynthesisUtterance(chunkText);
      this.utterance.lang = this.lang === 'es' ? 'es-ES' : 'en-US';
      this.utterance.rate = this.speechRate; // Usar la velocidad seleccionada por el usuario
      
      // Seleccionar una voz adecuada
      const voices = window.speechSynthesis.getVoices();
      const langCode = this.lang === 'es' ? 'es' : 'en';
      
      // Buscar una voz adecuada
      let voice = voices.find(v => v.lang.startsWith(langCode) && v.localService);
      if (!voice) {
        voice = voices.find(v => v.lang.startsWith(langCode));
      }
      
      if (voice) {
        this.utterance.voice = voice;
      }
      
      // Configurar eventos
      this.utterance.onend = () => {
        // Pasar al siguiente fragmento
        this.currentChunk++;
        
        // Si hay más fragmentos y debemos continuar, reproducir el siguiente
        if (this.shouldContinue && this.currentChunk < this.chunks.length) {
          // Pausa mínima entre fragmentos para evitar problemas técnicos
          // pero lo suficientemente corta para que la lectura sea fluida
          setTimeout(() => {
            this.speakNextChunk();
          }, 5);
        } else {
          // Hemos terminado todos los fragmentos o se ha detenido la lectura
          this.updateState(STATES.STOPPED);
        }
      };
      
      this.utterance.onerror = (event) => {
        console.error('Error en la síntesis de voz:', event);
        
        // Si es un error de interrupción, intentar con el siguiente fragmento
        if (event.error === 'interrupted' || event.error === 'canceled') {
          if (this.shouldContinue) {
            this.currentChunk++;
            if (this.currentChunk < this.chunks.length) {
              setTimeout(() => {
                this.speakNextChunk();
              }, 100);
            } else {
              this.updateState(STATES.STOPPED);
            }
          }
        } else {
          this.updateState(STATES.ERROR);
        }
      };
      
      // Iniciar la reproducción
      window.speechSynthesis.speak(this.utterance);
    } catch (error) {
      console.error('Error al reproducir fragmento:', error);
      
      // Intentar con el siguiente fragmento
      this.currentChunk++;
      if (this.shouldContinue && this.currentChunk < this.chunks.length) {
        setTimeout(() => {
          this.speakNextChunk();
        }, 100);
      } else {
        this.updateState(STATES.ERROR);
      }
    }
  }
  
  // Actualizar la barra de progreso
  updateProgressBar() {
    if (this.progressBar && this.totalChunks > 0) {
      const progress = (this.currentChunk / this.totalChunks) * 100;
      this.progressBar.style.width = `${progress}%`;
    }
  }
  
  // Pausar la lectura
  pauseReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      this.shouldContinue = false;
      window.speechSynthesis.cancel();
      this.updateState(STATES.PAUSED);
    } catch (error) {
      console.error('Error al pausar la lectura:', error);
      this.stopReading();
    }
  }
  
  // Reanudar la lectura
  resumeReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      this.shouldContinue = true;
      this.updateState(STATES.PLAYING);
      this.speakNextChunk();
    } catch (error) {
      console.error('Error al reanudar la lectura:', error);
      this.stopReading();
    }
  }
  
  // Detener la lectura
  stopReading() {
    if (!this.speechSynthesisSupported) return;
    
    try {
      this.shouldContinue = false;
      window.speechSynthesis.cancel();
      this.currentChunk = 0;
      this.updateState(STATES.STOPPED);
      
      // Ocultar los controles adicionales
      if (this.readerControls) {
        this.readerControls.classList.add('hidden');
        if (this.progressBar) {
          this.progressBar.style.width = '0%';
        }
      }
    } catch (error) {
      console.error('Error al detener la lectura:', error);
    }
  }
  
  // Actualizar el estado y la interfaz
  updateState(newState) {
    this.state = newState;
    
    // Actualizar la interfaz según el estado
    if (this.readButton && this.buttonText && this.stopButton) {
      switch (newState) {
        case STATES.PLAYING:
          this.buttonText.textContent = pauseText;
          this.readButton.classList.remove('bg-primary', 'hover:bg-primary/90', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-yellow-600', 'hover:bg-yellow-700');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.PAUSED:
          this.buttonText.textContent = resumeText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = false;
          this.stopButton.classList.remove('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.STOPPED:
          this.buttonText.textContent = readText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-red-600', 'hover:bg-red-700');
          this.readButton.classList.add('bg-primary', 'hover:bg-primary/90');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');
          break;
        case STATES.ERROR:
          this.buttonText.textContent = errorText;
          this.readButton.classList.remove('bg-yellow-600', 'hover:bg-yellow-700', 'bg-primary', 'hover:bg-primary/90');
          this.readButton.classList.add('bg-red-600', 'hover:bg-red-700');
          this.stopButton.disabled = true;
          this.stopButton.classList.add('opacity-50', 'cursor-not-allowed');
          break;
      }
    }
  }
}

// Inicializar cuando el DOM esté cargado
document.addEventListener('DOMContentLoaded', () => {
  new NaturalReader();
});
</script>

<style>
  /* Estilos específicos para móviles */
  @media (max-width: 640px) {
    .natural-reader button {
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      touch-action: manipulation;
    }
  }
  
  /* Animación para la barra de progreso */
  #progress-bar {
    transition: width 0.3s ease-in-out;
  }
</style>
