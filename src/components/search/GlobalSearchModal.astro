---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<!-- Modal de búsqueda global -->
<div
  id="global-search-modal"
  class="fixed inset-0 z-[100] hidden overflow-y-auto bg-black bg-opacity-50"
>
  <div class="flex min-h-screen items-center justify-center p-4">
    <div
      class="relative w-full max-w-2xl transform overflow-hidden rounded-lg bg-white dark:bg-gray-800 p-6 text-left shadow-xl"
    >
      <div class="mb-4 flex items-center justify-between">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">
          {lang === 'es' ? 'Buscar en el blog' : 'Search the blog'}
        </h3>
        <button id="global-search-close" class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300">
          <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Campo de búsqueda simple -->
      <div class="mb-4">
        <input
          type="text"
          id="global-search-input"
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-4 py-2 text-gray-900 dark:text-white focus:border-accent dark:focus:border-secondary focus:outline-none"
          placeholder={lang === 'es' ? 'Buscar artículos...' : 'Search articles...'}
        />
      </div>

      <!-- Resultados de búsqueda -->
      <div id="global-search-results" class="max-h-[60vh] overflow-y-auto"></div>
    </div>
  </div>
</div>

<script>
  // Función global para abrir el modal de búsqueda
  window.openGlobalSearchModal = function() {
    const searchModal = document.getElementById('global-search-modal');
    const searchInput = document.getElementById('global-search-input');
    
    if (searchModal) {
      searchModal.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
      
      // Enfocar el campo de búsqueda
      if (searchInput) {
        setTimeout(() => {
          searchInput.focus();
        }, 100);
      }
    }
  };
  
  // Función global para cerrar el modal de búsqueda
  window.closeGlobalSearchModal = function() {
    const searchModal = document.getElementById('global-search-modal');
    const searchResults = document.getElementById('global-search-results');
    const searchInput = document.getElementById('global-search-input');
    
    if (searchModal) {
      searchModal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
      
      // Limpiar resultados
      if (searchResults) {
        searchResults.innerHTML = '';
      }
      
      // Limpiar campo de búsqueda
      if (searchInput) {
        searchInput.value = '';
      }
    }
  };

  document.addEventListener('astro:page-load', () => {
    // Elementos del DOM
    const searchModal = document.getElementById('global-search-modal');
    const closeButton = document.getElementById('global-search-close');
    const searchInput = document.getElementById('global-search-input');
    const searchResults = document.getElementById('global-search-results');

    // Configuración de Algolia
    const appId = 'ECFPLTCVYS';
    const apiKey = '463072454d6fd853983fceec6f91f12a';
    const indexName = 'cronometras_blog';

    // Obtener el idioma actual de la URL
    const pathSegments = window.location.pathname.split('/').filter(Boolean);
    const currentLang = pathSegments[0] === 'es' || pathSegments[0] === 'en' ? pathSegments[0] : 'es';

    // Función para realizar la búsqueda
    async function performSearch(query) {
      if (!query.trim()) {
        if (searchResults) {
          searchResults.innerHTML = '';
        }
        return;
      }

      try {
        // Cargar algoliasearch si no está disponible
        if (!window.algoliasearch) {
          console.log('Cargando algoliasearch dinámicamente');
          const script = document.createElement('script');
          script.src = 'https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js';
          document.head.appendChild(script);
          
          // Esperar a que se cargue
          await new Promise(resolve => {
            script.onload = resolve;
          });
        }
        
        // Inicializar cliente de Algolia
        const searchClient = window.algoliasearch(appId, apiKey);
        const index = searchClient.initIndex(indexName);
        
        // Realizar búsqueda
        const { hits } = await index.search(query, {
          hitsPerPage: 10,
          filters: `lang:${currentLang}`,
          attributesToHighlight: ['title', 'description', 'content'],
          attributesToSnippet: ['content:30'],
        });
        
        // Mostrar resultados
        if (searchResults) {
          if (hits.length === 0) {
            searchResults.innerHTML = `<p class="text-gray-500 dark:text-gray-400 text-center py-4">
              ${currentLang === 'es' ? 'No se encontraron resultados.' : 'No results found.'}
            </p>`;
            return;
          }
          
          const resultsHTML = hits.map(hit => `
            <a href="/${currentLang}/blog/${hit.slug}" class="block p-4 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md mb-2">
              <div class="flex items-start">
                <div class="flex-shrink-0 mr-4">
                  <img src="${hit.heroImage || '/images/webp/default.webp'}" alt="${hit.title}" width="60" height="60" class="rounded-md">
                </div>
                <div>
                  <h4 class="text-gray-900 dark:text-white font-medium">${hit._highlightResult?.title?.value || hit.title}</h4>
                  <p class="text-gray-600 dark:text-gray-300 text-sm mt-1">${hit._highlightResult?.description?.value || hit.description}</p>
                  <div class="flex items-center mt-2">
                    <span class="text-xs text-accent dark:text-secondary font-medium">${hit.category}</span>
                    <span class="text-xs text-gray-500 dark:text-gray-400 ml-2">
                      ${new Date(hit.pubDate).toLocaleDateString(currentLang === 'es' ? 'es-ES' : 'en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                </div>
              </div>
            </a>
          `).join('');
          
          searchResults.innerHTML = resultsHTML;
        }
      } catch (error) {
        console.error('Error al realizar la búsqueda:', error);
        if (searchResults) {
          searchResults.innerHTML = `<p class="text-red-500 dark:text-red-400 text-center py-4">
            ${currentLang === 'es' ? 'Error al realizar la búsqueda.' : 'Error performing search.'}
          </p>`;
        }
      }
    }

    // Event listeners
    if (closeButton) {
      closeButton.addEventListener('click', window.closeGlobalSearchModal);
    }

    // Cerrar con Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && searchModal && !searchModal.classList.contains('hidden')) {
        window.closeGlobalSearchModal();
      }
    });

    // Cerrar al hacer clic fuera del modal
    searchModal?.addEventListener('click', (e) => {
      if (e.target === searchModal) {
        window.closeGlobalSearchModal();
      }
    });

    // Búsqueda en tiempo real
    if (searchInput) {
      let debounceTimer;
      searchInput.addEventListener('input', (e) => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
          performSearch(e.target.value);
        }, 300);
      });
    }
  });
</script>

<style>
  /* Estilos para los resultados destacados */
  :global(em) {
    background-color: rgba(255, 255, 0, 0.3);
    font-style: normal;
  }
  
  :global(.dark em) {
    background-color: rgba(255, 255, 0, 0.2);
  }
</style>
